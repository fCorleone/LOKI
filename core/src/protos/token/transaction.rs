// This file is generated by rust-protobuf 3.0.2. Do not edit
// .proto file is parsed by protoc 3.17.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `token/transaction.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_2;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:TokenTransaction)
pub struct TokenTransaction {
    // message oneof groups
    pub action: ::std::option::Option<token_transaction::Action>,
    // special fields
    // @@protoc_insertion_point(special_field:TokenTransaction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TokenTransaction {
    fn default() -> &'a TokenTransaction {
        <TokenTransaction as ::protobuf::Message>::default_instance()
    }
}

impl TokenTransaction {
    pub fn new() -> TokenTransaction {
        ::std::default::Default::default()
    }

    // .PlainTokenAction plain_action = 1;

    pub fn plain_action(&self) -> &PlainTokenAction {
        match self.action {
            ::std::option::Option::Some(token_transaction::Action::PlainAction(ref v)) => v,
            _ => <PlainTokenAction as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_plain_action(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_plain_action(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(token_transaction::Action::PlainAction(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_plain_action(&mut self, v: PlainTokenAction) {
        self.action = ::std::option::Option::Some(token_transaction::Action::PlainAction(v))
    }

    // Mutable pointer to the field.
    pub fn mut_plain_action(&mut self) -> &mut PlainTokenAction {
        if let ::std::option::Option::Some(token_transaction::Action::PlainAction(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(token_transaction::Action::PlainAction(PlainTokenAction::new()));
        }
        match self.action {
            ::std::option::Option::Some(token_transaction::Action::PlainAction(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_plain_action(&mut self) -> PlainTokenAction {
        if self.has_plain_action() {
            match self.action.take() {
                ::std::option::Option::Some(token_transaction::Action::PlainAction(v)) => v,
                _ => panic!(),
            }
        } else {
            PlainTokenAction::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PlainTokenAction>(
            "plain_action",
            TokenTransaction::has_plain_action,
            TokenTransaction::plain_action,
            TokenTransaction::mut_plain_action,
            TokenTransaction::set_plain_action,
        ));
        oneofs.push(token_transaction::Action::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TokenTransaction>(
            "TokenTransaction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TokenTransaction {
    const NAME: &'static str = "TokenTransaction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.action = ::std::option::Option::Some(token_transaction::Action::PlainAction(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.action {
            match v {
                &token_transaction::Action::PlainAction(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.action {
            match v {
                &token_transaction::Action::PlainAction(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TokenTransaction {
        TokenTransaction::new()
    }

    fn clear(&mut self) {
        self.action = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TokenTransaction {
        static instance: TokenTransaction = TokenTransaction {
            action: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TokenTransaction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TokenTransaction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TokenTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenTransaction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `TokenTransaction`
pub mod token_transaction {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:TokenTransaction.action)
    pub enum Action {
        // @@protoc_insertion_point(oneof_field:TokenTransaction.plain_action)
        PlainAction(super::PlainTokenAction),
    }

    impl ::protobuf::Oneof for Action {
    }

    impl ::protobuf::OneofFull for Action {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::TokenTransaction as ::protobuf::MessageFull>::descriptor().oneof_by_name("action").unwrap()).clone()
        }
    }

    impl Action {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Action>("action")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PlainTokenAction)
pub struct PlainTokenAction {
    // message oneof groups
    pub data: ::std::option::Option<plain_token_action::Data>,
    // special fields
    // @@protoc_insertion_point(special_field:PlainTokenAction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlainTokenAction {
    fn default() -> &'a PlainTokenAction {
        <PlainTokenAction as ::protobuf::Message>::default_instance()
    }
}

impl PlainTokenAction {
    pub fn new() -> PlainTokenAction {
        ::std::default::Default::default()
    }

    // .PlainImport plain_import = 1;

    pub fn plain_import(&self) -> &PlainImport {
        match self.data {
            ::std::option::Option::Some(plain_token_action::Data::PlainImport(ref v)) => v,
            _ => <PlainImport as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_plain_import(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_plain_import(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(plain_token_action::Data::PlainImport(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_plain_import(&mut self, v: PlainImport) {
        self.data = ::std::option::Option::Some(plain_token_action::Data::PlainImport(v))
    }

    // Mutable pointer to the field.
    pub fn mut_plain_import(&mut self) -> &mut PlainImport {
        if let ::std::option::Option::Some(plain_token_action::Data::PlainImport(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(plain_token_action::Data::PlainImport(PlainImport::new()));
        }
        match self.data {
            ::std::option::Option::Some(plain_token_action::Data::PlainImport(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_plain_import(&mut self) -> PlainImport {
        if self.has_plain_import() {
            match self.data.take() {
                ::std::option::Option::Some(plain_token_action::Data::PlainImport(v)) => v,
                _ => panic!(),
            }
        } else {
            PlainImport::new()
        }
    }

    // .PlainTransfer plain_transfer = 2;

    pub fn plain_transfer(&self) -> &PlainTransfer {
        match self.data {
            ::std::option::Option::Some(plain_token_action::Data::PlainTransfer(ref v)) => v,
            _ => <PlainTransfer as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_plain_transfer(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_plain_transfer(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(plain_token_action::Data::PlainTransfer(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_plain_transfer(&mut self, v: PlainTransfer) {
        self.data = ::std::option::Option::Some(plain_token_action::Data::PlainTransfer(v))
    }

    // Mutable pointer to the field.
    pub fn mut_plain_transfer(&mut self) -> &mut PlainTransfer {
        if let ::std::option::Option::Some(plain_token_action::Data::PlainTransfer(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(plain_token_action::Data::PlainTransfer(PlainTransfer::new()));
        }
        match self.data {
            ::std::option::Option::Some(plain_token_action::Data::PlainTransfer(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_plain_transfer(&mut self) -> PlainTransfer {
        if self.has_plain_transfer() {
            match self.data.take() {
                ::std::option::Option::Some(plain_token_action::Data::PlainTransfer(v)) => v,
                _ => panic!(),
            }
        } else {
            PlainTransfer::new()
        }
    }

    // .PlainTransfer plain_redeem = 3;

    pub fn plain_redeem(&self) -> &PlainTransfer {
        match self.data {
            ::std::option::Option::Some(plain_token_action::Data::PlainRedeem(ref v)) => v,
            _ => <PlainTransfer as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_plain_redeem(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_plain_redeem(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(plain_token_action::Data::PlainRedeem(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_plain_redeem(&mut self, v: PlainTransfer) {
        self.data = ::std::option::Option::Some(plain_token_action::Data::PlainRedeem(v))
    }

    // Mutable pointer to the field.
    pub fn mut_plain_redeem(&mut self) -> &mut PlainTransfer {
        if let ::std::option::Option::Some(plain_token_action::Data::PlainRedeem(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(plain_token_action::Data::PlainRedeem(PlainTransfer::new()));
        }
        match self.data {
            ::std::option::Option::Some(plain_token_action::Data::PlainRedeem(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_plain_redeem(&mut self) -> PlainTransfer {
        if self.has_plain_redeem() {
            match self.data.take() {
                ::std::option::Option::Some(plain_token_action::Data::PlainRedeem(v)) => v,
                _ => panic!(),
            }
        } else {
            PlainTransfer::new()
        }
    }

    // .PlainApprove plain_approve = 4;

    pub fn plain_approve(&self) -> &PlainApprove {
        match self.data {
            ::std::option::Option::Some(plain_token_action::Data::PlainApprove(ref v)) => v,
            _ => <PlainApprove as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_plain_approve(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_plain_approve(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(plain_token_action::Data::PlainApprove(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_plain_approve(&mut self, v: PlainApprove) {
        self.data = ::std::option::Option::Some(plain_token_action::Data::PlainApprove(v))
    }

    // Mutable pointer to the field.
    pub fn mut_plain_approve(&mut self) -> &mut PlainApprove {
        if let ::std::option::Option::Some(plain_token_action::Data::PlainApprove(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(plain_token_action::Data::PlainApprove(PlainApprove::new()));
        }
        match self.data {
            ::std::option::Option::Some(plain_token_action::Data::PlainApprove(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_plain_approve(&mut self) -> PlainApprove {
        if self.has_plain_approve() {
            match self.data.take() {
                ::std::option::Option::Some(plain_token_action::Data::PlainApprove(v)) => v,
                _ => panic!(),
            }
        } else {
            PlainApprove::new()
        }
    }

    // .PlainTransferFrom plain_transfer_From = 5;

    pub fn plain_transfer_From(&self) -> &PlainTransferFrom {
        match self.data {
            ::std::option::Option::Some(plain_token_action::Data::PlainTransferFrom(ref v)) => v,
            _ => <PlainTransferFrom as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_plain_transfer_From(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_plain_transfer_From(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(plain_token_action::Data::PlainTransferFrom(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_plain_transfer_From(&mut self, v: PlainTransferFrom) {
        self.data = ::std::option::Option::Some(plain_token_action::Data::PlainTransferFrom(v))
    }

    // Mutable pointer to the field.
    pub fn mut_plain_transfer_From(&mut self) -> &mut PlainTransferFrom {
        if let ::std::option::Option::Some(plain_token_action::Data::PlainTransferFrom(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(plain_token_action::Data::PlainTransferFrom(PlainTransferFrom::new()));
        }
        match self.data {
            ::std::option::Option::Some(plain_token_action::Data::PlainTransferFrom(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_plain_transfer_From(&mut self) -> PlainTransferFrom {
        if self.has_plain_transfer_From() {
            match self.data.take() {
                ::std::option::Option::Some(plain_token_action::Data::PlainTransferFrom(v)) => v,
                _ => panic!(),
            }
        } else {
            PlainTransferFrom::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PlainImport>(
            "plain_import",
            PlainTokenAction::has_plain_import,
            PlainTokenAction::plain_import,
            PlainTokenAction::mut_plain_import,
            PlainTokenAction::set_plain_import,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PlainTransfer>(
            "plain_transfer",
            PlainTokenAction::has_plain_transfer,
            PlainTokenAction::plain_transfer,
            PlainTokenAction::mut_plain_transfer,
            PlainTokenAction::set_plain_transfer,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PlainTransfer>(
            "plain_redeem",
            PlainTokenAction::has_plain_redeem,
            PlainTokenAction::plain_redeem,
            PlainTokenAction::mut_plain_redeem,
            PlainTokenAction::set_plain_redeem,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PlainApprove>(
            "plain_approve",
            PlainTokenAction::has_plain_approve,
            PlainTokenAction::plain_approve,
            PlainTokenAction::mut_plain_approve,
            PlainTokenAction::set_plain_approve,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PlainTransferFrom>(
            "plain_transfer_From",
            PlainTokenAction::has_plain_transfer_From,
            PlainTokenAction::plain_transfer_From,
            PlainTokenAction::mut_plain_transfer_From,
            PlainTokenAction::set_plain_transfer_From,
        ));
        oneofs.push(plain_token_action::Data::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlainTokenAction>(
            "PlainTokenAction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlainTokenAction {
    const NAME: &'static str = "PlainTokenAction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = ::std::option::Option::Some(plain_token_action::Data::PlainImport(is.read_message()?));
                },
                18 => {
                    self.data = ::std::option::Option::Some(plain_token_action::Data::PlainTransfer(is.read_message()?));
                },
                26 => {
                    self.data = ::std::option::Option::Some(plain_token_action::Data::PlainRedeem(is.read_message()?));
                },
                34 => {
                    self.data = ::std::option::Option::Some(plain_token_action::Data::PlainApprove(is.read_message()?));
                },
                42 => {
                    self.data = ::std::option::Option::Some(plain_token_action::Data::PlainTransferFrom(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &plain_token_action::Data::PlainImport(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &plain_token_action::Data::PlainTransfer(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &plain_token_action::Data::PlainRedeem(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &plain_token_action::Data::PlainApprove(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &plain_token_action::Data::PlainTransferFrom(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &plain_token_action::Data::PlainImport(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &plain_token_action::Data::PlainTransfer(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &plain_token_action::Data::PlainRedeem(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &plain_token_action::Data::PlainApprove(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &plain_token_action::Data::PlainTransferFrom(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlainTokenAction {
        PlainTokenAction::new()
    }

    fn clear(&mut self) {
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlainTokenAction {
        static instance: PlainTokenAction = PlainTokenAction {
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlainTokenAction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlainTokenAction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlainTokenAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlainTokenAction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PlainTokenAction`
pub mod plain_token_action {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:PlainTokenAction.data)
    pub enum Data {
        // @@protoc_insertion_point(oneof_field:PlainTokenAction.plain_import)
        PlainImport(super::PlainImport),
        // @@protoc_insertion_point(oneof_field:PlainTokenAction.plain_transfer)
        PlainTransfer(super::PlainTransfer),
        // @@protoc_insertion_point(oneof_field:PlainTokenAction.plain_redeem)
        PlainRedeem(super::PlainTransfer),
        // @@protoc_insertion_point(oneof_field:PlainTokenAction.plain_approve)
        PlainApprove(super::PlainApprove),
        // @@protoc_insertion_point(oneof_field:PlainTokenAction.plain_transfer_From)
        PlainTransferFrom(super::PlainTransferFrom),
    }

    impl ::protobuf::Oneof for Data {
    }

    impl ::protobuf::OneofFull for Data {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::PlainTokenAction as ::protobuf::MessageFull>::descriptor().oneof_by_name("data").unwrap()).clone()
        }
    }

    impl Data {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Data>("data")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PlainImport)
pub struct PlainImport {
    // message fields
    // @@protoc_insertion_point(field:PlainImport.outputs)
    pub outputs: ::std::vec::Vec<PlainOutput>,
    // special fields
    // @@protoc_insertion_point(special_field:PlainImport.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlainImport {
    fn default() -> &'a PlainImport {
        <PlainImport as ::protobuf::Message>::default_instance()
    }
}

impl PlainImport {
    pub fn new() -> PlainImport {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "outputs",
            |m: &PlainImport| { &m.outputs },
            |m: &mut PlainImport| { &mut m.outputs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlainImport>(
            "PlainImport",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlainImport {
    const NAME: &'static str = "PlainImport";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.outputs.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.outputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.outputs {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlainImport {
        PlainImport::new()
    }

    fn clear(&mut self) {
        self.outputs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlainImport {
        static instance: PlainImport = PlainImport {
            outputs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlainImport {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlainImport").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlainImport {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlainImport {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PlainTransfer)
pub struct PlainTransfer {
    // message fields
    // @@protoc_insertion_point(field:PlainTransfer.inputs)
    pub inputs: ::std::vec::Vec<InputId>,
    // @@protoc_insertion_point(field:PlainTransfer.outputs)
    pub outputs: ::std::vec::Vec<PlainOutput>,
    // special fields
    // @@protoc_insertion_point(special_field:PlainTransfer.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlainTransfer {
    fn default() -> &'a PlainTransfer {
        <PlainTransfer as ::protobuf::Message>::default_instance()
    }
}

impl PlainTransfer {
    pub fn new() -> PlainTransfer {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "inputs",
            |m: &PlainTransfer| { &m.inputs },
            |m: &mut PlainTransfer| { &mut m.inputs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "outputs",
            |m: &PlainTransfer| { &m.outputs },
            |m: &mut PlainTransfer| { &mut m.outputs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlainTransfer>(
            "PlainTransfer",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlainTransfer {
    const NAME: &'static str = "PlainTransfer";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.inputs.push(is.read_message()?);
                },
                18 => {
                    self.outputs.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.inputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.outputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.inputs {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.outputs {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlainTransfer {
        PlainTransfer::new()
    }

    fn clear(&mut self) {
        self.inputs.clear();
        self.outputs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlainTransfer {
        static instance: PlainTransfer = PlainTransfer {
            inputs: ::std::vec::Vec::new(),
            outputs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlainTransfer {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlainTransfer").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlainTransfer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlainTransfer {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PlainApprove)
pub struct PlainApprove {
    // message fields
    // @@protoc_insertion_point(field:PlainApprove.inputs)
    pub inputs: ::std::vec::Vec<InputId>,
    // @@protoc_insertion_point(field:PlainApprove.delegated_outputs)
    pub delegated_outputs: ::std::vec::Vec<PlainDelegatedOutput>,
    // @@protoc_insertion_point(field:PlainApprove.output)
    pub output: ::protobuf::MessageField<PlainOutput>,
    // special fields
    // @@protoc_insertion_point(special_field:PlainApprove.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlainApprove {
    fn default() -> &'a PlainApprove {
        <PlainApprove as ::protobuf::Message>::default_instance()
    }
}

impl PlainApprove {
    pub fn new() -> PlainApprove {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "inputs",
            |m: &PlainApprove| { &m.inputs },
            |m: &mut PlainApprove| { &mut m.inputs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "delegated_outputs",
            |m: &PlainApprove| { &m.delegated_outputs },
            |m: &mut PlainApprove| { &mut m.delegated_outputs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PlainOutput>(
            "output",
            |m: &PlainApprove| { &m.output },
            |m: &mut PlainApprove| { &mut m.output },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlainApprove>(
            "PlainApprove",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlainApprove {
    const NAME: &'static str = "PlainApprove";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.inputs.push(is.read_message()?);
                },
                18 => {
                    self.delegated_outputs.push(is.read_message()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.output)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.inputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.delegated_outputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.output.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.inputs {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.delegated_outputs {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.output.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlainApprove {
        PlainApprove::new()
    }

    fn clear(&mut self) {
        self.inputs.clear();
        self.delegated_outputs.clear();
        self.output.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlainApprove {
        static instance: PlainApprove = PlainApprove {
            inputs: ::std::vec::Vec::new(),
            delegated_outputs: ::std::vec::Vec::new(),
            output: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlainApprove {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlainApprove").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlainApprove {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlainApprove {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PlainTransferFrom)
pub struct PlainTransferFrom {
    // message fields
    // @@protoc_insertion_point(field:PlainTransferFrom.inputs)
    pub inputs: ::std::vec::Vec<InputId>,
    // @@protoc_insertion_point(field:PlainTransferFrom.outputs)
    pub outputs: ::std::vec::Vec<PlainOutput>,
    // @@protoc_insertion_point(field:PlainTransferFrom.delegated_output)
    pub delegated_output: ::protobuf::MessageField<PlainDelegatedOutput>,
    // special fields
    // @@protoc_insertion_point(special_field:PlainTransferFrom.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlainTransferFrom {
    fn default() -> &'a PlainTransferFrom {
        <PlainTransferFrom as ::protobuf::Message>::default_instance()
    }
}

impl PlainTransferFrom {
    pub fn new() -> PlainTransferFrom {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "inputs",
            |m: &PlainTransferFrom| { &m.inputs },
            |m: &mut PlainTransferFrom| { &mut m.inputs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "outputs",
            |m: &PlainTransferFrom| { &m.outputs },
            |m: &mut PlainTransferFrom| { &mut m.outputs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PlainDelegatedOutput>(
            "delegated_output",
            |m: &PlainTransferFrom| { &m.delegated_output },
            |m: &mut PlainTransferFrom| { &mut m.delegated_output },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlainTransferFrom>(
            "PlainTransferFrom",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlainTransferFrom {
    const NAME: &'static str = "PlainTransferFrom";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.inputs.push(is.read_message()?);
                },
                18 => {
                    self.outputs.push(is.read_message()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.delegated_output)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.inputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.outputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.delegated_output.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.inputs {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.outputs {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.delegated_output.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlainTransferFrom {
        PlainTransferFrom::new()
    }

    fn clear(&mut self) {
        self.inputs.clear();
        self.outputs.clear();
        self.delegated_output.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlainTransferFrom {
        static instance: PlainTransferFrom = PlainTransferFrom {
            inputs: ::std::vec::Vec::new(),
            outputs: ::std::vec::Vec::new(),
            delegated_output: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlainTransferFrom {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlainTransferFrom").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlainTransferFrom {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlainTransferFrom {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PlainOutput)
pub struct PlainOutput {
    // message fields
    // @@protoc_insertion_point(field:PlainOutput.owner)
    pub owner: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:PlainOutput.type)
    pub type_: ::std::string::String,
    // @@protoc_insertion_point(field:PlainOutput.quantity)
    pub quantity: u64,
    // special fields
    // @@protoc_insertion_point(special_field:PlainOutput.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlainOutput {
    fn default() -> &'a PlainOutput {
        <PlainOutput as ::protobuf::Message>::default_instance()
    }
}

impl PlainOutput {
    pub fn new() -> PlainOutput {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner",
            |m: &PlainOutput| { &m.owner },
            |m: &mut PlainOutput| { &mut m.owner },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &PlainOutput| { &m.type_ },
            |m: &mut PlainOutput| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quantity",
            |m: &PlainOutput| { &m.quantity },
            |m: &mut PlainOutput| { &mut m.quantity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlainOutput>(
            "PlainOutput",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlainOutput {
    const NAME: &'static str = "PlainOutput";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.owner = is.read_bytes()?;
                },
                18 => {
                    self.type_ = is.read_string()?;
                },
                24 => {
                    self.quantity = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.owner.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.owner);
        }
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.type_);
        }
        if self.quantity != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.quantity);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.owner.is_empty() {
            os.write_bytes(1, &self.owner)?;
        }
        if !self.type_.is_empty() {
            os.write_string(2, &self.type_)?;
        }
        if self.quantity != 0 {
            os.write_uint64(3, self.quantity)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlainOutput {
        PlainOutput::new()
    }

    fn clear(&mut self) {
        self.owner.clear();
        self.type_.clear();
        self.quantity = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlainOutput {
        static instance: PlainOutput = PlainOutput {
            owner: ::std::vec::Vec::new(),
            type_: ::std::string::String::new(),
            quantity: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlainOutput {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlainOutput").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlainOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlainOutput {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:InputId)
pub struct InputId {
    // message fields
    // @@protoc_insertion_point(field:InputId.tx_id)
    pub tx_id: ::std::string::String,
    // @@protoc_insertion_point(field:InputId.index)
    pub index: u32,
    // special fields
    // @@protoc_insertion_point(special_field:InputId.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InputId {
    fn default() -> &'a InputId {
        <InputId as ::protobuf::Message>::default_instance()
    }
}

impl InputId {
    pub fn new() -> InputId {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_id",
            |m: &InputId| { &m.tx_id },
            |m: &mut InputId| { &mut m.tx_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &InputId| { &m.index },
            |m: &mut InputId| { &mut m.index },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InputId>(
            "InputId",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InputId {
    const NAME: &'static str = "InputId";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tx_id = is.read_string()?;
                },
                16 => {
                    self.index = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.tx_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tx_id);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.index);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.tx_id.is_empty() {
            os.write_string(1, &self.tx_id)?;
        }
        if self.index != 0 {
            os.write_uint32(2, self.index)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InputId {
        InputId::new()
    }

    fn clear(&mut self) {
        self.tx_id.clear();
        self.index = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InputId {
        static instance: InputId = InputId {
            tx_id: ::std::string::String::new(),
            index: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InputId {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InputId").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InputId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InputId {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PlainDelegatedOutput)
pub struct PlainDelegatedOutput {
    // message fields
    // @@protoc_insertion_point(field:PlainDelegatedOutput.owner)
    pub owner: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:PlainDelegatedOutput.delegatees)
    pub delegatees: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:PlainDelegatedOutput.type)
    pub type_: ::std::string::String,
    // @@protoc_insertion_point(field:PlainDelegatedOutput.quantity)
    pub quantity: u64,
    // special fields
    // @@protoc_insertion_point(special_field:PlainDelegatedOutput.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlainDelegatedOutput {
    fn default() -> &'a PlainDelegatedOutput {
        <PlainDelegatedOutput as ::protobuf::Message>::default_instance()
    }
}

impl PlainDelegatedOutput {
    pub fn new() -> PlainDelegatedOutput {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner",
            |m: &PlainDelegatedOutput| { &m.owner },
            |m: &mut PlainDelegatedOutput| { &mut m.owner },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "delegatees",
            |m: &PlainDelegatedOutput| { &m.delegatees },
            |m: &mut PlainDelegatedOutput| { &mut m.delegatees },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &PlainDelegatedOutput| { &m.type_ },
            |m: &mut PlainDelegatedOutput| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quantity",
            |m: &PlainDelegatedOutput| { &m.quantity },
            |m: &mut PlainDelegatedOutput| { &mut m.quantity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlainDelegatedOutput>(
            "PlainDelegatedOutput",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlainDelegatedOutput {
    const NAME: &'static str = "PlainDelegatedOutput";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.owner = is.read_bytes()?;
                },
                18 => {
                    self.delegatees.push(is.read_bytes()?);
                },
                26 => {
                    self.type_ = is.read_string()?;
                },
                32 => {
                    self.quantity = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.owner.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.owner);
        }
        for value in &self.delegatees {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.type_);
        }
        if self.quantity != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.quantity);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.owner.is_empty() {
            os.write_bytes(1, &self.owner)?;
        }
        for v in &self.delegatees {
            os.write_bytes(2, &v)?;
        };
        if !self.type_.is_empty() {
            os.write_string(3, &self.type_)?;
        }
        if self.quantity != 0 {
            os.write_uint64(4, self.quantity)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlainDelegatedOutput {
        PlainDelegatedOutput::new()
    }

    fn clear(&mut self) {
        self.owner.clear();
        self.delegatees.clear();
        self.type_.clear();
        self.quantity = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlainDelegatedOutput {
        static instance: PlainDelegatedOutput = PlainDelegatedOutput {
            owner: ::std::vec::Vec::new(),
            delegatees: ::std::vec::Vec::new(),
            type_: ::std::string::String::new(),
            quantity: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlainDelegatedOutput {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlainDelegatedOutput").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlainDelegatedOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlainDelegatedOutput {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17token/transaction.proto\"T\n\x10TokenTransaction\x126\n\x0cplain_a\
    ction\x18\x01\x20\x01(\x0b2\x11.PlainTokenActionH\0R\x0bplainActionB\x08\
    \n\x06action\"\xb7\x02\n\x10PlainTokenAction\x121\n\x0cplain_import\x18\
    \x01\x20\x01(\x0b2\x0c.PlainImportH\0R\x0bplainImport\x127\n\x0eplain_tr\
    ansfer\x18\x02\x20\x01(\x0b2\x0e.PlainTransferH\0R\rplainTransfer\x123\n\
    \x0cplain_redeem\x18\x03\x20\x01(\x0b2\x0e.PlainTransferH\0R\x0bplainRed\
    eem\x124\n\rplain_approve\x18\x04\x20\x01(\x0b2\r.PlainApproveH\0R\x0cpl\
    ainApprove\x12D\n\x13plain_transfer_From\x18\x05\x20\x01(\x0b2\x12.Plain\
    TransferFromH\0R\x11plainTransferFromB\x06\n\x04data\"5\n\x0bPlainImport\
    \x12&\n\x07outputs\x18\x01\x20\x03(\x0b2\x0c.PlainOutputR\x07outputs\"Y\
    \n\rPlainTransfer\x12\x20\n\x06inputs\x18\x01\x20\x03(\x0b2\x08.InputIdR\
    \x06inputs\x12&\n\x07outputs\x18\x02\x20\x03(\x0b2\x0c.PlainOutputR\x07o\
    utputs\"\x9a\x01\n\x0cPlainApprove\x12\x20\n\x06inputs\x18\x01\x20\x03(\
    \x0b2\x08.InputIdR\x06inputs\x12B\n\x11delegated_outputs\x18\x02\x20\x03\
    (\x0b2\x15.PlainDelegatedOutputR\x10delegatedOutputs\x12$\n\x06output\
    \x18\x03\x20\x01(\x0b2\x0c.PlainOutputR\x06output\"\x9f\x01\n\x11PlainTr\
    ansferFrom\x12\x20\n\x06inputs\x18\x01\x20\x03(\x0b2\x08.InputIdR\x06inp\
    uts\x12&\n\x07outputs\x18\x02\x20\x03(\x0b2\x0c.PlainOutputR\x07outputs\
    \x12@\n\x10delegated_output\x18\x03\x20\x01(\x0b2\x15.PlainDelegatedOutp\
    utR\x0fdelegatedOutput\"S\n\x0bPlainOutput\x12\x14\n\x05owner\x18\x01\
    \x20\x01(\x0cR\x05owner\x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04type\
    \x12\x1a\n\x08quantity\x18\x03\x20\x01(\x04R\x08quantity\"4\n\x07InputId\
    \x12\x13\n\x05tx_id\x18\x01\x20\x01(\tR\x04txId\x12\x14\n\x05index\x18\
    \x02\x20\x01(\rR\x05index\"|\n\x14PlainDelegatedOutput\x12\x14\n\x05owne\
    r\x18\x01\x20\x01(\x0cR\x05owner\x12\x1e\n\ndelegatees\x18\x02\x20\x03(\
    \x0cR\ndelegatees\x12\x12\n\x04type\x18\x03\x20\x01(\tR\x04type\x12\x1a\
    \n\x08quantity\x18\x04\x20\x01(\x04R\x08quantityBQ\n#org.hyperledger.fab\
    ric.protos.tokenZ*github.com/hyperledger/fabric/protos/tokenb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(TokenTransaction::generated_message_descriptor_data());
            messages.push(PlainTokenAction::generated_message_descriptor_data());
            messages.push(PlainImport::generated_message_descriptor_data());
            messages.push(PlainTransfer::generated_message_descriptor_data());
            messages.push(PlainApprove::generated_message_descriptor_data());
            messages.push(PlainTransferFrom::generated_message_descriptor_data());
            messages.push(PlainOutput::generated_message_descriptor_data());
            messages.push(InputId::generated_message_descriptor_data());
            messages.push(PlainDelegatedOutput::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
