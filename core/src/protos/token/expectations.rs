// This file is generated by rust-protobuf 3.0.2. Do not edit
// .proto file is parsed by protoc 3.17.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `token/expectations.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_2;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.TokenExpectation)
pub struct TokenExpectation {
    // message oneof groups
    pub Expectation: ::std::option::Option<token_expectation::Expectation>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.TokenExpectation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TokenExpectation {
    fn default() -> &'a TokenExpectation {
        <TokenExpectation as ::protobuf::Message>::default_instance()
    }
}

impl TokenExpectation {
    pub fn new() -> TokenExpectation {
        ::std::default::Default::default()
    }

    // .protos.PlainExpectation plain_expectation = 1;

    pub fn plain_expectation(&self) -> &PlainExpectation {
        match self.Expectation {
            ::std::option::Option::Some(token_expectation::Expectation::PlainExpectation(ref v)) => v,
            _ => <PlainExpectation as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_plain_expectation(&mut self) {
        self.Expectation = ::std::option::Option::None;
    }

    pub fn has_plain_expectation(&self) -> bool {
        match self.Expectation {
            ::std::option::Option::Some(token_expectation::Expectation::PlainExpectation(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_plain_expectation(&mut self, v: PlainExpectation) {
        self.Expectation = ::std::option::Option::Some(token_expectation::Expectation::PlainExpectation(v))
    }

    // Mutable pointer to the field.
    pub fn mut_plain_expectation(&mut self) -> &mut PlainExpectation {
        if let ::std::option::Option::Some(token_expectation::Expectation::PlainExpectation(_)) = self.Expectation {
        } else {
            self.Expectation = ::std::option::Option::Some(token_expectation::Expectation::PlainExpectation(PlainExpectation::new()));
        }
        match self.Expectation {
            ::std::option::Option::Some(token_expectation::Expectation::PlainExpectation(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_plain_expectation(&mut self) -> PlainExpectation {
        if self.has_plain_expectation() {
            match self.Expectation.take() {
                ::std::option::Option::Some(token_expectation::Expectation::PlainExpectation(v)) => v,
                _ => panic!(),
            }
        } else {
            PlainExpectation::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PlainExpectation>(
            "plain_expectation",
            TokenExpectation::has_plain_expectation,
            TokenExpectation::plain_expectation,
            TokenExpectation::mut_plain_expectation,
            TokenExpectation::set_plain_expectation,
        ));
        oneofs.push(token_expectation::Expectation::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TokenExpectation>(
            "TokenExpectation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TokenExpectation {
    const NAME: &'static str = "TokenExpectation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Expectation = ::std::option::Option::Some(token_expectation::Expectation::PlainExpectation(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.Expectation {
            match v {
                &token_expectation::Expectation::PlainExpectation(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.Expectation {
            match v {
                &token_expectation::Expectation::PlainExpectation(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TokenExpectation {
        TokenExpectation::new()
    }

    fn clear(&mut self) {
        self.Expectation = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TokenExpectation {
        static instance: TokenExpectation = TokenExpectation {
            Expectation: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TokenExpectation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TokenExpectation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TokenExpectation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenExpectation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `TokenExpectation`
pub mod token_expectation {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:protos.TokenExpectation.Expectation)
    pub enum Expectation {
        // @@protoc_insertion_point(oneof_field:protos.TokenExpectation.plain_expectation)
        PlainExpectation(super::PlainExpectation),
    }

    impl ::protobuf::Oneof for Expectation {
    }

    impl ::protobuf::OneofFull for Expectation {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::TokenExpectation as ::protobuf::MessageFull>::descriptor().oneof_by_name("Expectation").unwrap()).clone()
        }
    }

    impl Expectation {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Expectation>("Expectation")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.PlainExpectation)
pub struct PlainExpectation {
    // message oneof groups
    pub payload: ::std::option::Option<plain_expectation::Payload>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.PlainExpectation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlainExpectation {
    fn default() -> &'a PlainExpectation {
        <PlainExpectation as ::protobuf::Message>::default_instance()
    }
}

impl PlainExpectation {
    pub fn new() -> PlainExpectation {
        ::std::default::Default::default()
    }

    // .protos.PlainTokenExpectation import_expectation = 1;

    pub fn import_expectation(&self) -> &PlainTokenExpectation {
        match self.payload {
            ::std::option::Option::Some(plain_expectation::Payload::ImportExpectation(ref v)) => v,
            _ => <PlainTokenExpectation as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_import_expectation(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_import_expectation(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(plain_expectation::Payload::ImportExpectation(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_import_expectation(&mut self, v: PlainTokenExpectation) {
        self.payload = ::std::option::Option::Some(plain_expectation::Payload::ImportExpectation(v))
    }

    // Mutable pointer to the field.
    pub fn mut_import_expectation(&mut self) -> &mut PlainTokenExpectation {
        if let ::std::option::Option::Some(plain_expectation::Payload::ImportExpectation(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(plain_expectation::Payload::ImportExpectation(PlainTokenExpectation::new()));
        }
        match self.payload {
            ::std::option::Option::Some(plain_expectation::Payload::ImportExpectation(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_import_expectation(&mut self) -> PlainTokenExpectation {
        if self.has_import_expectation() {
            match self.payload.take() {
                ::std::option::Option::Some(plain_expectation::Payload::ImportExpectation(v)) => v,
                _ => panic!(),
            }
        } else {
            PlainTokenExpectation::new()
        }
    }

    // .protos.PlainTokenExpectation transfer_expectation = 2;

    pub fn transfer_expectation(&self) -> &PlainTokenExpectation {
        match self.payload {
            ::std::option::Option::Some(plain_expectation::Payload::TransferExpectation(ref v)) => v,
            _ => <PlainTokenExpectation as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_transfer_expectation(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_transfer_expectation(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(plain_expectation::Payload::TransferExpectation(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transfer_expectation(&mut self, v: PlainTokenExpectation) {
        self.payload = ::std::option::Option::Some(plain_expectation::Payload::TransferExpectation(v))
    }

    // Mutable pointer to the field.
    pub fn mut_transfer_expectation(&mut self) -> &mut PlainTokenExpectation {
        if let ::std::option::Option::Some(plain_expectation::Payload::TransferExpectation(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(plain_expectation::Payload::TransferExpectation(PlainTokenExpectation::new()));
        }
        match self.payload {
            ::std::option::Option::Some(plain_expectation::Payload::TransferExpectation(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_transfer_expectation(&mut self) -> PlainTokenExpectation {
        if self.has_transfer_expectation() {
            match self.payload.take() {
                ::std::option::Option::Some(plain_expectation::Payload::TransferExpectation(v)) => v,
                _ => panic!(),
            }
        } else {
            PlainTokenExpectation::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PlainTokenExpectation>(
            "import_expectation",
            PlainExpectation::has_import_expectation,
            PlainExpectation::import_expectation,
            PlainExpectation::mut_import_expectation,
            PlainExpectation::set_import_expectation,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PlainTokenExpectation>(
            "transfer_expectation",
            PlainExpectation::has_transfer_expectation,
            PlainExpectation::transfer_expectation,
            PlainExpectation::mut_transfer_expectation,
            PlainExpectation::set_transfer_expectation,
        ));
        oneofs.push(plain_expectation::Payload::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlainExpectation>(
            "PlainExpectation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlainExpectation {
    const NAME: &'static str = "PlainExpectation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.payload = ::std::option::Option::Some(plain_expectation::Payload::ImportExpectation(is.read_message()?));
                },
                18 => {
                    self.payload = ::std::option::Option::Some(plain_expectation::Payload::TransferExpectation(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &plain_expectation::Payload::ImportExpectation(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &plain_expectation::Payload::TransferExpectation(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &plain_expectation::Payload::ImportExpectation(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &plain_expectation::Payload::TransferExpectation(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlainExpectation {
        PlainExpectation::new()
    }

    fn clear(&mut self) {
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlainExpectation {
        static instance: PlainExpectation = PlainExpectation {
            payload: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlainExpectation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlainExpectation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlainExpectation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlainExpectation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PlainExpectation`
pub mod plain_expectation {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:protos.PlainExpectation.payload)
    pub enum Payload {
        // @@protoc_insertion_point(oneof_field:protos.PlainExpectation.import_expectation)
        ImportExpectation(super::PlainTokenExpectation),
        // @@protoc_insertion_point(oneof_field:protos.PlainExpectation.transfer_expectation)
        TransferExpectation(super::PlainTokenExpectation),
    }

    impl ::protobuf::Oneof for Payload {
    }

    impl ::protobuf::OneofFull for Payload {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::PlainExpectation as ::protobuf::MessageFull>::descriptor().oneof_by_name("payload").unwrap()).clone()
        }
    }

    impl Payload {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Payload>("payload")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.PlainTokenExpectation)
pub struct PlainTokenExpectation {
    // message fields
    // @@protoc_insertion_point(field:protos.PlainTokenExpectation.outputs)
    pub outputs: ::std::vec::Vec<crate::protos::token::transaction::PlainOutput>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.PlainTokenExpectation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlainTokenExpectation {
    fn default() -> &'a PlainTokenExpectation {
        <PlainTokenExpectation as ::protobuf::Message>::default_instance()
    }
}

impl PlainTokenExpectation {
    pub fn new() -> PlainTokenExpectation {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "outputs",
            |m: &PlainTokenExpectation| { &m.outputs },
            |m: &mut PlainTokenExpectation| { &mut m.outputs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlainTokenExpectation>(
            "PlainTokenExpectation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlainTokenExpectation {
    const NAME: &'static str = "PlainTokenExpectation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.outputs.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.outputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.outputs {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlainTokenExpectation {
        PlainTokenExpectation::new()
    }

    fn clear(&mut self) {
        self.outputs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlainTokenExpectation {
        static instance: PlainTokenExpectation = PlainTokenExpectation {
            outputs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlainTokenExpectation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlainTokenExpectation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlainTokenExpectation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlainTokenExpectation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18token/expectations.proto\x12\x06protos\x1a\x1fgoogle/protobuf/time\
    stamp.proto\x1a\x17token/transaction.proto\"j\n\x10TokenExpectation\x12G\
    \n\x11plain_expectation\x18\x01\x20\x01(\x0b2\x18.protos.PlainExpectatio\
    nH\0R\x10plainExpectationB\r\n\x0bExpectation\"\xc1\x01\n\x10PlainExpect\
    ation\x12N\n\x12import_expectation\x18\x01\x20\x01(\x0b2\x1d.protos.Plai\
    nTokenExpectationH\0R\x11importExpectation\x12R\n\x14transfer_expectatio\
    n\x18\x02\x20\x01(\x0b2\x1d.protos.PlainTokenExpectationH\0R\x13transfer\
    ExpectationB\t\n\x07payload\"?\n\x15PlainTokenExpectation\x12&\n\x07outp\
    uts\x18\x01\x20\x03(\x0b2\x0c.PlainOutputR\x07outputsBQ\n#org.hyperledge\
    r.fabric.protos.tokenZ*github.com/hyperledger/fabric/protos/tokenb\x06pr\
    oto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(crate::protos::token::transaction::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(TokenExpectation::generated_message_descriptor_data());
            messages.push(PlainExpectation::generated_message_descriptor_data());
            messages.push(PlainTokenExpectation::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
