// This file is generated by rust-protobuf 3.0.2. Do not edit
// .proto file is parsed by protoc 3.17.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `token/prover.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_2;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.TokenToIssue)
pub struct TokenToIssue {
    // message fields
    // @@protoc_insertion_point(field:protos.TokenToIssue.recipient)
    pub recipient: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protos.TokenToIssue.type)
    pub type_: ::std::string::String,
    // @@protoc_insertion_point(field:protos.TokenToIssue.quantity)
    pub quantity: u64,
    // special fields
    // @@protoc_insertion_point(special_field:protos.TokenToIssue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TokenToIssue {
    fn default() -> &'a TokenToIssue {
        <TokenToIssue as ::protobuf::Message>::default_instance()
    }
}

impl TokenToIssue {
    pub fn new() -> TokenToIssue {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "recipient",
            |m: &TokenToIssue| { &m.recipient },
            |m: &mut TokenToIssue| { &mut m.recipient },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &TokenToIssue| { &m.type_ },
            |m: &mut TokenToIssue| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quantity",
            |m: &TokenToIssue| { &m.quantity },
            |m: &mut TokenToIssue| { &mut m.quantity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TokenToIssue>(
            "TokenToIssue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TokenToIssue {
    const NAME: &'static str = "TokenToIssue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.recipient = is.read_bytes()?;
                },
                18 => {
                    self.type_ = is.read_string()?;
                },
                24 => {
                    self.quantity = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.recipient.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.recipient);
        }
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.type_);
        }
        if self.quantity != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.quantity);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.recipient.is_empty() {
            os.write_bytes(1, &self.recipient)?;
        }
        if !self.type_.is_empty() {
            os.write_string(2, &self.type_)?;
        }
        if self.quantity != 0 {
            os.write_uint64(3, self.quantity)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TokenToIssue {
        TokenToIssue::new()
    }

    fn clear(&mut self) {
        self.recipient.clear();
        self.type_.clear();
        self.quantity = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TokenToIssue {
        static instance: TokenToIssue = TokenToIssue {
            recipient: ::std::vec::Vec::new(),
            type_: ::std::string::String::new(),
            quantity: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TokenToIssue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TokenToIssue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TokenToIssue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenToIssue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.RecipientTransferShare)
pub struct RecipientTransferShare {
    // message fields
    // @@protoc_insertion_point(field:protos.RecipientTransferShare.recipient)
    pub recipient: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protos.RecipientTransferShare.quantity)
    pub quantity: u64,
    // special fields
    // @@protoc_insertion_point(special_field:protos.RecipientTransferShare.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RecipientTransferShare {
    fn default() -> &'a RecipientTransferShare {
        <RecipientTransferShare as ::protobuf::Message>::default_instance()
    }
}

impl RecipientTransferShare {
    pub fn new() -> RecipientTransferShare {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "recipient",
            |m: &RecipientTransferShare| { &m.recipient },
            |m: &mut RecipientTransferShare| { &mut m.recipient },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quantity",
            |m: &RecipientTransferShare| { &m.quantity },
            |m: &mut RecipientTransferShare| { &mut m.quantity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RecipientTransferShare>(
            "RecipientTransferShare",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RecipientTransferShare {
    const NAME: &'static str = "RecipientTransferShare";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.recipient = is.read_bytes()?;
                },
                16 => {
                    self.quantity = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.recipient.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.recipient);
        }
        if self.quantity != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.quantity);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.recipient.is_empty() {
            os.write_bytes(1, &self.recipient)?;
        }
        if self.quantity != 0 {
            os.write_uint64(2, self.quantity)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RecipientTransferShare {
        RecipientTransferShare::new()
    }

    fn clear(&mut self) {
        self.recipient.clear();
        self.quantity = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RecipientTransferShare {
        static instance: RecipientTransferShare = RecipientTransferShare {
            recipient: ::std::vec::Vec::new(),
            quantity: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RecipientTransferShare {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RecipientTransferShare").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RecipientTransferShare {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecipientTransferShare {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.TokenOutput)
pub struct TokenOutput {
    // message fields
    // @@protoc_insertion_point(field:protos.TokenOutput.id)
    pub id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protos.TokenOutput.type)
    pub type_: ::std::string::String,
    // @@protoc_insertion_point(field:protos.TokenOutput.quantity)
    pub quantity: u64,
    // special fields
    // @@protoc_insertion_point(special_field:protos.TokenOutput.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TokenOutput {
    fn default() -> &'a TokenOutput {
        <TokenOutput as ::protobuf::Message>::default_instance()
    }
}

impl TokenOutput {
    pub fn new() -> TokenOutput {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &TokenOutput| { &m.id },
            |m: &mut TokenOutput| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &TokenOutput| { &m.type_ },
            |m: &mut TokenOutput| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quantity",
            |m: &TokenOutput| { &m.quantity },
            |m: &mut TokenOutput| { &mut m.quantity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TokenOutput>(
            "TokenOutput",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TokenOutput {
    const NAME: &'static str = "TokenOutput";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_bytes()?;
                },
                18 => {
                    self.type_ = is.read_string()?;
                },
                24 => {
                    self.quantity = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.type_);
        }
        if self.quantity != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.quantity);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        if !self.type_.is_empty() {
            os.write_string(2, &self.type_)?;
        }
        if self.quantity != 0 {
            os.write_uint64(3, self.quantity)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TokenOutput {
        TokenOutput::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.type_.clear();
        self.quantity = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TokenOutput {
        static instance: TokenOutput = TokenOutput {
            id: ::std::vec::Vec::new(),
            type_: ::std::string::String::new(),
            quantity: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TokenOutput {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TokenOutput").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TokenOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenOutput {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.UnspentTokens)
pub struct UnspentTokens {
    // message fields
    // @@protoc_insertion_point(field:protos.UnspentTokens.tokens)
    pub tokens: ::std::vec::Vec<TokenOutput>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.UnspentTokens.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnspentTokens {
    fn default() -> &'a UnspentTokens {
        <UnspentTokens as ::protobuf::Message>::default_instance()
    }
}

impl UnspentTokens {
    pub fn new() -> UnspentTokens {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tokens",
            |m: &UnspentTokens| { &m.tokens },
            |m: &mut UnspentTokens| { &mut m.tokens },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnspentTokens>(
            "UnspentTokens",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnspentTokens {
    const NAME: &'static str = "UnspentTokens";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tokens.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.tokens {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.tokens {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnspentTokens {
        UnspentTokens::new()
    }

    fn clear(&mut self) {
        self.tokens.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnspentTokens {
        static instance: UnspentTokens = UnspentTokens {
            tokens: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnspentTokens {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnspentTokens").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnspentTokens {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnspentTokens {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.ListRequest)
pub struct ListRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.ListRequest.credential)
    pub credential: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.ListRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListRequest {
    fn default() -> &'a ListRequest {
        <ListRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListRequest {
    pub fn new() -> ListRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "credential",
            |m: &ListRequest| { &m.credential },
            |m: &mut ListRequest| { &mut m.credential },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListRequest>(
            "ListRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListRequest {
    const NAME: &'static str = "ListRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.credential = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.credential.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.credential);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.credential.is_empty() {
            os.write_bytes(1, &self.credential)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListRequest {
        ListRequest::new()
    }

    fn clear(&mut self) {
        self.credential.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListRequest {
        static instance: ListRequest = ListRequest {
            credential: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.ImportRequest)
pub struct ImportRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.ImportRequest.credential)
    pub credential: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protos.ImportRequest.tokens_to_issue)
    pub tokens_to_issue: ::std::vec::Vec<TokenToIssue>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.ImportRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ImportRequest {
    fn default() -> &'a ImportRequest {
        <ImportRequest as ::protobuf::Message>::default_instance()
    }
}

impl ImportRequest {
    pub fn new() -> ImportRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "credential",
            |m: &ImportRequest| { &m.credential },
            |m: &mut ImportRequest| { &mut m.credential },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tokens_to_issue",
            |m: &ImportRequest| { &m.tokens_to_issue },
            |m: &mut ImportRequest| { &mut m.tokens_to_issue },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ImportRequest>(
            "ImportRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ImportRequest {
    const NAME: &'static str = "ImportRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.credential = is.read_bytes()?;
                },
                18 => {
                    self.tokens_to_issue.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.credential.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.credential);
        }
        for value in &self.tokens_to_issue {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.credential.is_empty() {
            os.write_bytes(1, &self.credential)?;
        }
        for v in &self.tokens_to_issue {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ImportRequest {
        ImportRequest::new()
    }

    fn clear(&mut self) {
        self.credential.clear();
        self.tokens_to_issue.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ImportRequest {
        static instance: ImportRequest = ImportRequest {
            credential: ::std::vec::Vec::new(),
            tokens_to_issue: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ImportRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ImportRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ImportRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ImportRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.TransferRequest)
pub struct TransferRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.TransferRequest.credential)
    pub credential: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protos.TransferRequest.token_ids)
    pub token_ids: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:protos.TransferRequest.shares)
    pub shares: ::std::vec::Vec<RecipientTransferShare>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.TransferRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TransferRequest {
    fn default() -> &'a TransferRequest {
        <TransferRequest as ::protobuf::Message>::default_instance()
    }
}

impl TransferRequest {
    pub fn new() -> TransferRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "credential",
            |m: &TransferRequest| { &m.credential },
            |m: &mut TransferRequest| { &mut m.credential },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "token_ids",
            |m: &TransferRequest| { &m.token_ids },
            |m: &mut TransferRequest| { &mut m.token_ids },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "shares",
            |m: &TransferRequest| { &m.shares },
            |m: &mut TransferRequest| { &mut m.shares },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TransferRequest>(
            "TransferRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TransferRequest {
    const NAME: &'static str = "TransferRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.credential = is.read_bytes()?;
                },
                18 => {
                    self.token_ids.push(is.read_bytes()?);
                },
                26 => {
                    self.shares.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.credential.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.credential);
        }
        for value in &self.token_ids {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in &self.shares {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.credential.is_empty() {
            os.write_bytes(1, &self.credential)?;
        }
        for v in &self.token_ids {
            os.write_bytes(2, &v)?;
        };
        for v in &self.shares {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TransferRequest {
        TransferRequest::new()
    }

    fn clear(&mut self) {
        self.credential.clear();
        self.token_ids.clear();
        self.shares.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TransferRequest {
        static instance: TransferRequest = TransferRequest {
            credential: ::std::vec::Vec::new(),
            token_ids: ::std::vec::Vec::new(),
            shares: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TransferRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TransferRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TransferRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransferRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.RedeemRequest)
pub struct RedeemRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.RedeemRequest.credential)
    pub credential: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protos.RedeemRequest.token_ids)
    pub token_ids: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:protos.RedeemRequest.quantity_to_redeem)
    pub quantity_to_redeem: u64,
    // special fields
    // @@protoc_insertion_point(special_field:protos.RedeemRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RedeemRequest {
    fn default() -> &'a RedeemRequest {
        <RedeemRequest as ::protobuf::Message>::default_instance()
    }
}

impl RedeemRequest {
    pub fn new() -> RedeemRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "credential",
            |m: &RedeemRequest| { &m.credential },
            |m: &mut RedeemRequest| { &mut m.credential },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "token_ids",
            |m: &RedeemRequest| { &m.token_ids },
            |m: &mut RedeemRequest| { &mut m.token_ids },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quantity_to_redeem",
            |m: &RedeemRequest| { &m.quantity_to_redeem },
            |m: &mut RedeemRequest| { &mut m.quantity_to_redeem },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RedeemRequest>(
            "RedeemRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RedeemRequest {
    const NAME: &'static str = "RedeemRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.credential = is.read_bytes()?;
                },
                18 => {
                    self.token_ids.push(is.read_bytes()?);
                },
                24 => {
                    self.quantity_to_redeem = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.credential.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.credential);
        }
        for value in &self.token_ids {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        if self.quantity_to_redeem != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.quantity_to_redeem);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.credential.is_empty() {
            os.write_bytes(1, &self.credential)?;
        }
        for v in &self.token_ids {
            os.write_bytes(2, &v)?;
        };
        if self.quantity_to_redeem != 0 {
            os.write_uint64(3, self.quantity_to_redeem)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RedeemRequest {
        RedeemRequest::new()
    }

    fn clear(&mut self) {
        self.credential.clear();
        self.token_ids.clear();
        self.quantity_to_redeem = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RedeemRequest {
        static instance: RedeemRequest = RedeemRequest {
            credential: ::std::vec::Vec::new(),
            token_ids: ::std::vec::Vec::new(),
            quantity_to_redeem: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RedeemRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RedeemRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RedeemRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RedeemRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.AllowanceRecipientShare)
pub struct AllowanceRecipientShare {
    // message fields
    // @@protoc_insertion_point(field:protos.AllowanceRecipientShare.recipient)
    pub recipient: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protos.AllowanceRecipientShare.quantity)
    pub quantity: u64,
    // special fields
    // @@protoc_insertion_point(special_field:protos.AllowanceRecipientShare.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AllowanceRecipientShare {
    fn default() -> &'a AllowanceRecipientShare {
        <AllowanceRecipientShare as ::protobuf::Message>::default_instance()
    }
}

impl AllowanceRecipientShare {
    pub fn new() -> AllowanceRecipientShare {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "recipient",
            |m: &AllowanceRecipientShare| { &m.recipient },
            |m: &mut AllowanceRecipientShare| { &mut m.recipient },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quantity",
            |m: &AllowanceRecipientShare| { &m.quantity },
            |m: &mut AllowanceRecipientShare| { &mut m.quantity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AllowanceRecipientShare>(
            "AllowanceRecipientShare",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AllowanceRecipientShare {
    const NAME: &'static str = "AllowanceRecipientShare";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.recipient = is.read_bytes()?;
                },
                16 => {
                    self.quantity = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.recipient.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.recipient);
        }
        if self.quantity != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.quantity);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.recipient.is_empty() {
            os.write_bytes(1, &self.recipient)?;
        }
        if self.quantity != 0 {
            os.write_uint64(2, self.quantity)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AllowanceRecipientShare {
        AllowanceRecipientShare::new()
    }

    fn clear(&mut self) {
        self.recipient.clear();
        self.quantity = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AllowanceRecipientShare {
        static instance: AllowanceRecipientShare = AllowanceRecipientShare {
            recipient: ::std::vec::Vec::new(),
            quantity: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AllowanceRecipientShare {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AllowanceRecipientShare").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AllowanceRecipientShare {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AllowanceRecipientShare {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.ApproveRequest)
pub struct ApproveRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.ApproveRequest.credential)
    pub credential: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protos.ApproveRequest.allowance_shares)
    pub allowance_shares: ::std::vec::Vec<AllowanceRecipientShare>,
    // @@protoc_insertion_point(field:protos.ApproveRequest.token_ids)
    pub token_ids: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.ApproveRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ApproveRequest {
    fn default() -> &'a ApproveRequest {
        <ApproveRequest as ::protobuf::Message>::default_instance()
    }
}

impl ApproveRequest {
    pub fn new() -> ApproveRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "credential",
            |m: &ApproveRequest| { &m.credential },
            |m: &mut ApproveRequest| { &mut m.credential },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "allowance_shares",
            |m: &ApproveRequest| { &m.allowance_shares },
            |m: &mut ApproveRequest| { &mut m.allowance_shares },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "token_ids",
            |m: &ApproveRequest| { &m.token_ids },
            |m: &mut ApproveRequest| { &mut m.token_ids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ApproveRequest>(
            "ApproveRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ApproveRequest {
    const NAME: &'static str = "ApproveRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.credential = is.read_bytes()?;
                },
                18 => {
                    self.allowance_shares.push(is.read_message()?);
                },
                26 => {
                    self.token_ids.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.credential.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.credential);
        }
        for value in &self.allowance_shares {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.token_ids {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.credential.is_empty() {
            os.write_bytes(1, &self.credential)?;
        }
        for v in &self.allowance_shares {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.token_ids {
            os.write_bytes(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ApproveRequest {
        ApproveRequest::new()
    }

    fn clear(&mut self) {
        self.credential.clear();
        self.allowance_shares.clear();
        self.token_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ApproveRequest {
        static instance: ApproveRequest = ApproveRequest {
            credential: ::std::vec::Vec::new(),
            allowance_shares: ::std::vec::Vec::new(),
            token_ids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ApproveRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ApproveRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ApproveRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApproveRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.ExpectationRequest)
pub struct ExpectationRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.ExpectationRequest.credential)
    pub credential: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protos.ExpectationRequest.expectation)
    pub expectation: ::protobuf::MessageField<crate::protos::token::expectations::TokenExpectation>,
    // @@protoc_insertion_point(field:protos.ExpectationRequest.token_ids)
    pub token_ids: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.ExpectationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExpectationRequest {
    fn default() -> &'a ExpectationRequest {
        <ExpectationRequest as ::protobuf::Message>::default_instance()
    }
}

impl ExpectationRequest {
    pub fn new() -> ExpectationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "credential",
            |m: &ExpectationRequest| { &m.credential },
            |m: &mut ExpectationRequest| { &mut m.credential },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::protos::token::expectations::TokenExpectation>(
            "expectation",
            |m: &ExpectationRequest| { &m.expectation },
            |m: &mut ExpectationRequest| { &mut m.expectation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "token_ids",
            |m: &ExpectationRequest| { &m.token_ids },
            |m: &mut ExpectationRequest| { &mut m.token_ids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExpectationRequest>(
            "ExpectationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExpectationRequest {
    const NAME: &'static str = "ExpectationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.credential = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.expectation)?;
                },
                26 => {
                    self.token_ids.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.credential.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.credential);
        }
        if let Some(v) = self.expectation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.token_ids {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.credential.is_empty() {
            os.write_bytes(1, &self.credential)?;
        }
        if let Some(v) = self.expectation.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.token_ids {
            os.write_bytes(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExpectationRequest {
        ExpectationRequest::new()
    }

    fn clear(&mut self) {
        self.credential.clear();
        self.expectation.clear();
        self.token_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExpectationRequest {
        static instance: ExpectationRequest = ExpectationRequest {
            credential: ::std::vec::Vec::new(),
            expectation: ::protobuf::MessageField::none(),
            token_ids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExpectationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExpectationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExpectationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExpectationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.Header)
pub struct Header {
    // message fields
    // @@protoc_insertion_point(field:protos.Header.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:protos.Header.channel_id)
    pub channel_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.Header.nonce)
    pub nonce: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protos.Header.creator)
    pub creator: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.Header.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &Header| { &m.timestamp },
            |m: &mut Header| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel_id",
            |m: &Header| { &m.channel_id },
            |m: &mut Header| { &mut m.channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nonce",
            |m: &Header| { &m.nonce },
            |m: &mut Header| { &mut m.nonce },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "creator",
            |m: &Header| { &m.creator },
            |m: &mut Header| { &mut m.creator },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Header>(
            "Header",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Header {
    const NAME: &'static str = "Header";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                18 => {
                    self.channel_id = is.read_string()?;
                },
                26 => {
                    self.nonce = is.read_bytes()?;
                },
                34 => {
                    self.creator = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.channel_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.channel_id);
        }
        if !self.nonce.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.nonce);
        }
        if !self.creator.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.creator);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.channel_id.is_empty() {
            os.write_string(2, &self.channel_id)?;
        }
        if !self.nonce.is_empty() {
            os.write_bytes(3, &self.nonce)?;
        }
        if !self.creator.is_empty() {
            os.write_bytes(4, &self.creator)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Header {
        Header::new()
    }

    fn clear(&mut self) {
        self.timestamp.clear();
        self.channel_id.clear();
        self.nonce.clear();
        self.creator.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Header {
        static instance: Header = Header {
            timestamp: ::protobuf::MessageField::none(),
            channel_id: ::std::string::String::new(),
            nonce: ::std::vec::Vec::new(),
            creator: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Header {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Header").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.Command)
pub struct Command {
    // message fields
    // @@protoc_insertion_point(field:protos.Command.header)
    pub header: ::protobuf::MessageField<Header>,
    // message oneof groups
    pub payload: ::std::option::Option<command::Payload>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.Command.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Command {
    fn default() -> &'a Command {
        <Command as ::protobuf::Message>::default_instance()
    }
}

impl Command {
    pub fn new() -> Command {
        ::std::default::Default::default()
    }

    // .protos.ImportRequest import_request = 2;

    pub fn import_request(&self) -> &ImportRequest {
        match self.payload {
            ::std::option::Option::Some(command::Payload::ImportRequest(ref v)) => v,
            _ => <ImportRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_import_request(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_import_request(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(command::Payload::ImportRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_import_request(&mut self, v: ImportRequest) {
        self.payload = ::std::option::Option::Some(command::Payload::ImportRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_import_request(&mut self) -> &mut ImportRequest {
        if let ::std::option::Option::Some(command::Payload::ImportRequest(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(command::Payload::ImportRequest(ImportRequest::new()));
        }
        match self.payload {
            ::std::option::Option::Some(command::Payload::ImportRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_import_request(&mut self) -> ImportRequest {
        if self.has_import_request() {
            match self.payload.take() {
                ::std::option::Option::Some(command::Payload::ImportRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            ImportRequest::new()
        }
    }

    // .protos.TransferRequest transfer_request = 3;

    pub fn transfer_request(&self) -> &TransferRequest {
        match self.payload {
            ::std::option::Option::Some(command::Payload::TransferRequest(ref v)) => v,
            _ => <TransferRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_transfer_request(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_transfer_request(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(command::Payload::TransferRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transfer_request(&mut self, v: TransferRequest) {
        self.payload = ::std::option::Option::Some(command::Payload::TransferRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_transfer_request(&mut self) -> &mut TransferRequest {
        if let ::std::option::Option::Some(command::Payload::TransferRequest(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(command::Payload::TransferRequest(TransferRequest::new()));
        }
        match self.payload {
            ::std::option::Option::Some(command::Payload::TransferRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_transfer_request(&mut self) -> TransferRequest {
        if self.has_transfer_request() {
            match self.payload.take() {
                ::std::option::Option::Some(command::Payload::TransferRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            TransferRequest::new()
        }
    }

    // .protos.ListRequest list_request = 4;

    pub fn list_request(&self) -> &ListRequest {
        match self.payload {
            ::std::option::Option::Some(command::Payload::ListRequest(ref v)) => v,
            _ => <ListRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_list_request(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_list_request(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(command::Payload::ListRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_list_request(&mut self, v: ListRequest) {
        self.payload = ::std::option::Option::Some(command::Payload::ListRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_list_request(&mut self) -> &mut ListRequest {
        if let ::std::option::Option::Some(command::Payload::ListRequest(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(command::Payload::ListRequest(ListRequest::new()));
        }
        match self.payload {
            ::std::option::Option::Some(command::Payload::ListRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_list_request(&mut self) -> ListRequest {
        if self.has_list_request() {
            match self.payload.take() {
                ::std::option::Option::Some(command::Payload::ListRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            ListRequest::new()
        }
    }

    // .protos.RedeemRequest redeem_request = 5;

    pub fn redeem_request(&self) -> &RedeemRequest {
        match self.payload {
            ::std::option::Option::Some(command::Payload::RedeemRequest(ref v)) => v,
            _ => <RedeemRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_redeem_request(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_redeem_request(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(command::Payload::RedeemRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_redeem_request(&mut self, v: RedeemRequest) {
        self.payload = ::std::option::Option::Some(command::Payload::RedeemRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_redeem_request(&mut self) -> &mut RedeemRequest {
        if let ::std::option::Option::Some(command::Payload::RedeemRequest(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(command::Payload::RedeemRequest(RedeemRequest::new()));
        }
        match self.payload {
            ::std::option::Option::Some(command::Payload::RedeemRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_redeem_request(&mut self) -> RedeemRequest {
        if self.has_redeem_request() {
            match self.payload.take() {
                ::std::option::Option::Some(command::Payload::RedeemRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            RedeemRequest::new()
        }
    }

    // .protos.ApproveRequest approve_request = 6;

    pub fn approve_request(&self) -> &ApproveRequest {
        match self.payload {
            ::std::option::Option::Some(command::Payload::ApproveRequest(ref v)) => v,
            _ => <ApproveRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_approve_request(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_approve_request(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(command::Payload::ApproveRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_approve_request(&mut self, v: ApproveRequest) {
        self.payload = ::std::option::Option::Some(command::Payload::ApproveRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_approve_request(&mut self) -> &mut ApproveRequest {
        if let ::std::option::Option::Some(command::Payload::ApproveRequest(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(command::Payload::ApproveRequest(ApproveRequest::new()));
        }
        match self.payload {
            ::std::option::Option::Some(command::Payload::ApproveRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_approve_request(&mut self) -> ApproveRequest {
        if self.has_approve_request() {
            match self.payload.take() {
                ::std::option::Option::Some(command::Payload::ApproveRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            ApproveRequest::new()
        }
    }

    // .protos.TransferRequest transfer_from_request = 7;

    pub fn transfer_from_request(&self) -> &TransferRequest {
        match self.payload {
            ::std::option::Option::Some(command::Payload::TransferFromRequest(ref v)) => v,
            _ => <TransferRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_transfer_from_request(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_transfer_from_request(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(command::Payload::TransferFromRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transfer_from_request(&mut self, v: TransferRequest) {
        self.payload = ::std::option::Option::Some(command::Payload::TransferFromRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_transfer_from_request(&mut self) -> &mut TransferRequest {
        if let ::std::option::Option::Some(command::Payload::TransferFromRequest(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(command::Payload::TransferFromRequest(TransferRequest::new()));
        }
        match self.payload {
            ::std::option::Option::Some(command::Payload::TransferFromRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_transfer_from_request(&mut self) -> TransferRequest {
        if self.has_transfer_from_request() {
            match self.payload.take() {
                ::std::option::Option::Some(command::Payload::TransferFromRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            TransferRequest::new()
        }
    }

    // .protos.ExpectationRequest expectation_request = 8;

    pub fn expectation_request(&self) -> &ExpectationRequest {
        match self.payload {
            ::std::option::Option::Some(command::Payload::ExpectationRequest(ref v)) => v,
            _ => <ExpectationRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_expectation_request(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_expectation_request(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(command::Payload::ExpectationRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_expectation_request(&mut self, v: ExpectationRequest) {
        self.payload = ::std::option::Option::Some(command::Payload::ExpectationRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_expectation_request(&mut self) -> &mut ExpectationRequest {
        if let ::std::option::Option::Some(command::Payload::ExpectationRequest(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(command::Payload::ExpectationRequest(ExpectationRequest::new()));
        }
        match self.payload {
            ::std::option::Option::Some(command::Payload::ExpectationRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_expectation_request(&mut self) -> ExpectationRequest {
        if self.has_expectation_request() {
            match self.payload.take() {
                ::std::option::Option::Some(command::Payload::ExpectationRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            ExpectationRequest::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Header>(
            "header",
            |m: &Command| { &m.header },
            |m: &mut Command| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ImportRequest>(
            "import_request",
            Command::has_import_request,
            Command::import_request,
            Command::mut_import_request,
            Command::set_import_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, TransferRequest>(
            "transfer_request",
            Command::has_transfer_request,
            Command::transfer_request,
            Command::mut_transfer_request,
            Command::set_transfer_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ListRequest>(
            "list_request",
            Command::has_list_request,
            Command::list_request,
            Command::mut_list_request,
            Command::set_list_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RedeemRequest>(
            "redeem_request",
            Command::has_redeem_request,
            Command::redeem_request,
            Command::mut_redeem_request,
            Command::set_redeem_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ApproveRequest>(
            "approve_request",
            Command::has_approve_request,
            Command::approve_request,
            Command::mut_approve_request,
            Command::set_approve_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, TransferRequest>(
            "transfer_from_request",
            Command::has_transfer_from_request,
            Command::transfer_from_request,
            Command::mut_transfer_from_request,
            Command::set_transfer_from_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ExpectationRequest>(
            "expectation_request",
            Command::has_expectation_request,
            Command::expectation_request,
            Command::mut_expectation_request,
            Command::set_expectation_request,
        ));
        oneofs.push(command::Payload::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Command>(
            "Command",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Command {
    const NAME: &'static str = "Command";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.payload = ::std::option::Option::Some(command::Payload::ImportRequest(is.read_message()?));
                },
                26 => {
                    self.payload = ::std::option::Option::Some(command::Payload::TransferRequest(is.read_message()?));
                },
                34 => {
                    self.payload = ::std::option::Option::Some(command::Payload::ListRequest(is.read_message()?));
                },
                42 => {
                    self.payload = ::std::option::Option::Some(command::Payload::RedeemRequest(is.read_message()?));
                },
                50 => {
                    self.payload = ::std::option::Option::Some(command::Payload::ApproveRequest(is.read_message()?));
                },
                58 => {
                    self.payload = ::std::option::Option::Some(command::Payload::TransferFromRequest(is.read_message()?));
                },
                66 => {
                    self.payload = ::std::option::Option::Some(command::Payload::ExpectationRequest(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &command::Payload::ImportRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Payload::TransferRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Payload::ListRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Payload::RedeemRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Payload::ApproveRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Payload::TransferFromRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Payload::ExpectationRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &command::Payload::ImportRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &command::Payload::TransferRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &command::Payload::ListRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &command::Payload::RedeemRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &command::Payload::ApproveRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &command::Payload::TransferFromRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &command::Payload::ExpectationRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Command {
        Command::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Command {
        static instance: Command = Command {
            header: ::protobuf::MessageField::none(),
            payload: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Command {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Command").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Command {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Command {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Command`
pub mod command {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:protos.Command.payload)
    pub enum Payload {
        // @@protoc_insertion_point(oneof_field:protos.Command.import_request)
        ImportRequest(super::ImportRequest),
        // @@protoc_insertion_point(oneof_field:protos.Command.transfer_request)
        TransferRequest(super::TransferRequest),
        // @@protoc_insertion_point(oneof_field:protos.Command.list_request)
        ListRequest(super::ListRequest),
        // @@protoc_insertion_point(oneof_field:protos.Command.redeem_request)
        RedeemRequest(super::RedeemRequest),
        // @@protoc_insertion_point(oneof_field:protos.Command.approve_request)
        ApproveRequest(super::ApproveRequest),
        // @@protoc_insertion_point(oneof_field:protos.Command.transfer_from_request)
        TransferFromRequest(super::TransferRequest),
        // @@protoc_insertion_point(oneof_field:protos.Command.expectation_request)
        ExpectationRequest(super::ExpectationRequest),
    }

    impl ::protobuf::Oneof for Payload {
    }

    impl ::protobuf::OneofFull for Payload {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Command as ::protobuf::MessageFull>::descriptor().oneof_by_name("payload").unwrap()).clone()
        }
    }

    impl Payload {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Payload>("payload")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.SignedCommand)
pub struct SignedCommand {
    // message fields
    // @@protoc_insertion_point(field:protos.SignedCommand.command)
    pub command: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protos.SignedCommand.signature)
    pub signature: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.SignedCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignedCommand {
    fn default() -> &'a SignedCommand {
        <SignedCommand as ::protobuf::Message>::default_instance()
    }
}

impl SignedCommand {
    pub fn new() -> SignedCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "command",
            |m: &SignedCommand| { &m.command },
            |m: &mut SignedCommand| { &mut m.command },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &SignedCommand| { &m.signature },
            |m: &mut SignedCommand| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignedCommand>(
            "SignedCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignedCommand {
    const NAME: &'static str = "SignedCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.command = is.read_bytes()?;
                },
                18 => {
                    self.signature = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.command.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.command);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.command.is_empty() {
            os.write_bytes(1, &self.command)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(2, &self.signature)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignedCommand {
        SignedCommand::new()
    }

    fn clear(&mut self) {
        self.command.clear();
        self.signature.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignedCommand {
        static instance: SignedCommand = SignedCommand {
            command: ::std::vec::Vec::new(),
            signature: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignedCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignedCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignedCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.CommandResponseHeader)
pub struct CommandResponseHeader {
    // message fields
    // @@protoc_insertion_point(field:protos.CommandResponseHeader.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:protos.CommandResponseHeader.command_hash)
    pub command_hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protos.CommandResponseHeader.creator)
    pub creator: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.CommandResponseHeader.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CommandResponseHeader {
    fn default() -> &'a CommandResponseHeader {
        <CommandResponseHeader as ::protobuf::Message>::default_instance()
    }
}

impl CommandResponseHeader {
    pub fn new() -> CommandResponseHeader {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &CommandResponseHeader| { &m.timestamp },
            |m: &mut CommandResponseHeader| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "command_hash",
            |m: &CommandResponseHeader| { &m.command_hash },
            |m: &mut CommandResponseHeader| { &mut m.command_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "creator",
            |m: &CommandResponseHeader| { &m.creator },
            |m: &mut CommandResponseHeader| { &mut m.creator },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CommandResponseHeader>(
            "CommandResponseHeader",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CommandResponseHeader {
    const NAME: &'static str = "CommandResponseHeader";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                18 => {
                    self.command_hash = is.read_bytes()?;
                },
                26 => {
                    self.creator = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.command_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.command_hash);
        }
        if !self.creator.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.creator);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.command_hash.is_empty() {
            os.write_bytes(2, &self.command_hash)?;
        }
        if !self.creator.is_empty() {
            os.write_bytes(3, &self.creator)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CommandResponseHeader {
        CommandResponseHeader::new()
    }

    fn clear(&mut self) {
        self.timestamp.clear();
        self.command_hash.clear();
        self.creator.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CommandResponseHeader {
        static instance: CommandResponseHeader = CommandResponseHeader {
            timestamp: ::protobuf::MessageField::none(),
            command_hash: ::std::vec::Vec::new(),
            creator: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CommandResponseHeader {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CommandResponseHeader").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CommandResponseHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandResponseHeader {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.Error)
pub struct Error {
    // message fields
    // @@protoc_insertion_point(field:protos.Error.message)
    pub message: ::std::string::String,
    // @@protoc_insertion_point(field:protos.Error.payload)
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.Error.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Error {
    fn default() -> &'a Error {
        <Error as ::protobuf::Message>::default_instance()
    }
}

impl Error {
    pub fn new() -> Error {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &Error| { &m.message },
            |m: &mut Error| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payload",
            |m: &Error| { &m.payload },
            |m: &mut Error| { &mut m.payload },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Error>(
            "Error",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Error {
    const NAME: &'static str = "Error";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message = is.read_string()?;
                },
                18 => {
                    self.payload = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.message.is_empty() {
            os.write_string(1, &self.message)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(2, &self.payload)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Error {
        Error::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.payload.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Error {
        static instance: Error = Error {
            message: ::std::string::String::new(),
            payload: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Error {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Error").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Error {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.CommandResponse)
pub struct CommandResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.CommandResponse.header)
    pub header: ::protobuf::MessageField<CommandResponseHeader>,
    // message oneof groups
    pub payload: ::std::option::Option<command_response::Payload>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.CommandResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CommandResponse {
    fn default() -> &'a CommandResponse {
        <CommandResponse as ::protobuf::Message>::default_instance()
    }
}

impl CommandResponse {
    pub fn new() -> CommandResponse {
        ::std::default::Default::default()
    }

    // .protos.Error err = 2;

    pub fn err(&self) -> &Error {
        match self.payload {
            ::std::option::Option::Some(command_response::Payload::Err(ref v)) => v,
            _ => <Error as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_err(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_err(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(command_response::Payload::Err(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_err(&mut self, v: Error) {
        self.payload = ::std::option::Option::Some(command_response::Payload::Err(v))
    }

    // Mutable pointer to the field.
    pub fn mut_err(&mut self) -> &mut Error {
        if let ::std::option::Option::Some(command_response::Payload::Err(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(command_response::Payload::Err(Error::new()));
        }
        match self.payload {
            ::std::option::Option::Some(command_response::Payload::Err(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_err(&mut self) -> Error {
        if self.has_err() {
            match self.payload.take() {
                ::std::option::Option::Some(command_response::Payload::Err(v)) => v,
                _ => panic!(),
            }
        } else {
            Error::new()
        }
    }

    // .TokenTransaction token_transaction = 3;

    pub fn token_transaction(&self) -> &crate::protos::token::transaction::TokenTransaction {
        match self.payload {
            ::std::option::Option::Some(command_response::Payload::TokenTransaction(ref v)) => v,
            _ => <crate::protos::token::transaction::TokenTransaction as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_token_transaction(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_token_transaction(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(command_response::Payload::TokenTransaction(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_token_transaction(&mut self, v: crate::protos::token::transaction::TokenTransaction) {
        self.payload = ::std::option::Option::Some(command_response::Payload::TokenTransaction(v))
    }

    // Mutable pointer to the field.
    pub fn mut_token_transaction(&mut self) -> &mut crate::protos::token::transaction::TokenTransaction {
        if let ::std::option::Option::Some(command_response::Payload::TokenTransaction(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(command_response::Payload::TokenTransaction(crate::protos::token::transaction::TokenTransaction::new()));
        }
        match self.payload {
            ::std::option::Option::Some(command_response::Payload::TokenTransaction(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_token_transaction(&mut self) -> crate::protos::token::transaction::TokenTransaction {
        if self.has_token_transaction() {
            match self.payload.take() {
                ::std::option::Option::Some(command_response::Payload::TokenTransaction(v)) => v,
                _ => panic!(),
            }
        } else {
            crate::protos::token::transaction::TokenTransaction::new()
        }
    }

    // .protos.UnspentTokens unspent_tokens = 4;

    pub fn unspent_tokens(&self) -> &UnspentTokens {
        match self.payload {
            ::std::option::Option::Some(command_response::Payload::UnspentTokens(ref v)) => v,
            _ => <UnspentTokens as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_unspent_tokens(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_unspent_tokens(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(command_response::Payload::UnspentTokens(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_unspent_tokens(&mut self, v: UnspentTokens) {
        self.payload = ::std::option::Option::Some(command_response::Payload::UnspentTokens(v))
    }

    // Mutable pointer to the field.
    pub fn mut_unspent_tokens(&mut self) -> &mut UnspentTokens {
        if let ::std::option::Option::Some(command_response::Payload::UnspentTokens(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(command_response::Payload::UnspentTokens(UnspentTokens::new()));
        }
        match self.payload {
            ::std::option::Option::Some(command_response::Payload::UnspentTokens(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_unspent_tokens(&mut self) -> UnspentTokens {
        if self.has_unspent_tokens() {
            match self.payload.take() {
                ::std::option::Option::Some(command_response::Payload::UnspentTokens(v)) => v,
                _ => panic!(),
            }
        } else {
            UnspentTokens::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CommandResponseHeader>(
            "header",
            |m: &CommandResponse| { &m.header },
            |m: &mut CommandResponse| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Error>(
            "err",
            CommandResponse::has_err,
            CommandResponse::err,
            CommandResponse::mut_err,
            CommandResponse::set_err,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, crate::protos::token::transaction::TokenTransaction>(
            "token_transaction",
            CommandResponse::has_token_transaction,
            CommandResponse::token_transaction,
            CommandResponse::mut_token_transaction,
            CommandResponse::set_token_transaction,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, UnspentTokens>(
            "unspent_tokens",
            CommandResponse::has_unspent_tokens,
            CommandResponse::unspent_tokens,
            CommandResponse::mut_unspent_tokens,
            CommandResponse::set_unspent_tokens,
        ));
        oneofs.push(command_response::Payload::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CommandResponse>(
            "CommandResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CommandResponse {
    const NAME: &'static str = "CommandResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.payload = ::std::option::Option::Some(command_response::Payload::Err(is.read_message()?));
                },
                26 => {
                    self.payload = ::std::option::Option::Some(command_response::Payload::TokenTransaction(is.read_message()?));
                },
                34 => {
                    self.payload = ::std::option::Option::Some(command_response::Payload::UnspentTokens(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &command_response::Payload::Err(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command_response::Payload::TokenTransaction(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command_response::Payload::UnspentTokens(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &command_response::Payload::Err(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &command_response::Payload::TokenTransaction(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &command_response::Payload::UnspentTokens(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CommandResponse {
        CommandResponse::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CommandResponse {
        static instance: CommandResponse = CommandResponse {
            header: ::protobuf::MessageField::none(),
            payload: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CommandResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CommandResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CommandResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CommandResponse`
pub mod command_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:protos.CommandResponse.payload)
    pub enum Payload {
        // @@protoc_insertion_point(oneof_field:protos.CommandResponse.err)
        Err(super::Error),
        // @@protoc_insertion_point(oneof_field:protos.CommandResponse.token_transaction)
        TokenTransaction(crate::protos::token::transaction::TokenTransaction),
        // @@protoc_insertion_point(oneof_field:protos.CommandResponse.unspent_tokens)
        UnspentTokens(super::UnspentTokens),
    }

    impl ::protobuf::Oneof for Payload {
    }

    impl ::protobuf::OneofFull for Payload {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::CommandResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("payload").unwrap()).clone()
        }
    }

    impl Payload {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Payload>("payload")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.SignedCommandResponse)
pub struct SignedCommandResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.SignedCommandResponse.response)
    pub response: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protos.SignedCommandResponse.signature)
    pub signature: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.SignedCommandResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignedCommandResponse {
    fn default() -> &'a SignedCommandResponse {
        <SignedCommandResponse as ::protobuf::Message>::default_instance()
    }
}

impl SignedCommandResponse {
    pub fn new() -> SignedCommandResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "response",
            |m: &SignedCommandResponse| { &m.response },
            |m: &mut SignedCommandResponse| { &mut m.response },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &SignedCommandResponse| { &m.signature },
            |m: &mut SignedCommandResponse| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignedCommandResponse>(
            "SignedCommandResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignedCommandResponse {
    const NAME: &'static str = "SignedCommandResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.response = is.read_bytes()?;
                },
                18 => {
                    self.signature = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.response.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.response);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.response.is_empty() {
            os.write_bytes(1, &self.response)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(2, &self.signature)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignedCommandResponse {
        SignedCommandResponse::new()
    }

    fn clear(&mut self) {
        self.response.clear();
        self.signature.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignedCommandResponse {
        static instance: SignedCommandResponse = SignedCommandResponse {
            response: ::std::vec::Vec::new(),
            signature: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignedCommandResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignedCommandResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignedCommandResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedCommandResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12token/prover.proto\x12\x06protos\x1a\x1fgoogle/protobuf/timestamp.\
    proto\x1a\x18token/expectations.proto\x1a\x17token/transaction.proto\"\\\
    \n\x0cTokenToIssue\x12\x1c\n\trecipient\x18\x01\x20\x01(\x0cR\trecipient\
    \x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04type\x12\x1a\n\x08quantity\x18\
    \x03\x20\x01(\x04R\x08quantity\"R\n\x16RecipientTransferShare\x12\x1c\n\
    \trecipient\x18\x01\x20\x01(\x0cR\trecipient\x12\x1a\n\x08quantity\x18\
    \x02\x20\x01(\x04R\x08quantity\"M\n\x0bTokenOutput\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\x0cR\x02id\x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04type\
    \x12\x1a\n\x08quantity\x18\x03\x20\x01(\x04R\x08quantity\"<\n\rUnspentTo\
    kens\x12+\n\x06tokens\x18\x01\x20\x03(\x0b2\x13.protos.TokenOutputR\x06t\
    okens\"-\n\x0bListRequest\x12\x1e\n\ncredential\x18\x01\x20\x01(\x0cR\nc\
    redential\"m\n\rImportRequest\x12\x1e\n\ncredential\x18\x01\x20\x01(\x0c\
    R\ncredential\x12<\n\x0ftokens_to_issue\x18\x02\x20\x03(\x0b2\x14.protos\
    .TokenToIssueR\rtokensToIssue\"\x86\x01\n\x0fTransferRequest\x12\x1e\n\n\
    credential\x18\x01\x20\x01(\x0cR\ncredential\x12\x1b\n\ttoken_ids\x18\
    \x02\x20\x03(\x0cR\x08tokenIds\x126\n\x06shares\x18\x03\x20\x03(\x0b2\
    \x1e.protos.RecipientTransferShareR\x06shares\"z\n\rRedeemRequest\x12\
    \x1e\n\ncredential\x18\x01\x20\x01(\x0cR\ncredential\x12\x1b\n\ttoken_id\
    s\x18\x02\x20\x03(\x0cR\x08tokenIds\x12,\n\x12quantity_to_redeem\x18\x03\
    \x20\x01(\x04R\x10quantityToRedeem\"S\n\x17AllowanceRecipientShare\x12\
    \x1c\n\trecipient\x18\x01\x20\x01(\x0cR\trecipient\x12\x1a\n\x08quantity\
    \x18\x02\x20\x01(\x04R\x08quantity\"\x99\x01\n\x0eApproveRequest\x12\x1e\
    \n\ncredential\x18\x01\x20\x01(\x0cR\ncredential\x12J\n\x10allowance_sha\
    res\x18\x02\x20\x03(\x0b2\x1f.protos.AllowanceRecipientShareR\x0fallowan\
    ceShares\x12\x1b\n\ttoken_ids\x18\x03\x20\x03(\x0cR\x08tokenIds\"\x8d\
    \x01\n\x12ExpectationRequest\x12\x1e\n\ncredential\x18\x01\x20\x01(\x0cR\
    \ncredential\x12:\n\x0bexpectation\x18\x02\x20\x01(\x0b2\x18.protos.Toke\
    nExpectationR\x0bexpectation\x12\x1b\n\ttoken_ids\x18\x03\x20\x03(\x0cR\
    \x08tokenIds\"\x91\x01\n\x06Header\x128\n\ttimestamp\x18\x01\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x1d\n\nchannel_id\
    \x18\x02\x20\x01(\tR\tchannelId\x12\x14\n\x05nonce\x18\x03\x20\x01(\x0cR\
    \x05nonce\x12\x18\n\x07creator\x18\x04\x20\x01(\x0cR\x07creator\"\x9d\
    \x04\n\x07Command\x12&\n\x06header\x18\x01\x20\x01(\x0b2\x0e.protos.Head\
    erR\x06header\x12>\n\x0eimport_request\x18\x02\x20\x01(\x0b2\x15.protos.\
    ImportRequestH\0R\rimportRequest\x12D\n\x10transfer_request\x18\x03\x20\
    \x01(\x0b2\x17.protos.TransferRequestH\0R\x0ftransferRequest\x128\n\x0cl\
    ist_request\x18\x04\x20\x01(\x0b2\x13.protos.ListRequestH\0R\x0blistRequ\
    est\x12>\n\x0eredeem_request\x18\x05\x20\x01(\x0b2\x15.protos.RedeemRequ\
    estH\0R\rredeemRequest\x12A\n\x0fapprove_request\x18\x06\x20\x01(\x0b2\
    \x16.protos.ApproveRequestH\0R\x0eapproveRequest\x12M\n\x15transfer_from\
    _request\x18\x07\x20\x01(\x0b2\x17.protos.TransferRequestH\0R\x13transfe\
    rFromRequest\x12M\n\x13expectation_request\x18\x08\x20\x01(\x0b2\x1a.pro\
    tos.ExpectationRequestH\0R\x12expectationRequestB\t\n\x07payload\"G\n\rS\
    ignedCommand\x12\x18\n\x07command\x18\x01\x20\x01(\x0cR\x07command\x12\
    \x1c\n\tsignature\x18\x02\x20\x01(\x0cR\tsignature\"\x8e\x01\n\x15Comman\
    dResponseHeader\x128\n\ttimestamp\x18\x01\x20\x01(\x0b2\x1a.google.proto\
    buf.TimestampR\ttimestamp\x12!\n\x0ccommand_hash\x18\x02\x20\x01(\x0cR\
    \x0bcommandHash\x12\x18\n\x07creator\x18\x03\x20\x01(\x0cR\x07creator\";\
    \n\x05Error\x12\x18\n\x07message\x18\x01\x20\x01(\tR\x07message\x12\x18\
    \n\x07payload\x18\x02\x20\x01(\x0cR\x07payload\"\xf8\x01\n\x0fCommandRes\
    ponse\x125\n\x06header\x18\x01\x20\x01(\x0b2\x1d.protos.CommandResponseH\
    eaderR\x06header\x12!\n\x03err\x18\x02\x20\x01(\x0b2\r.protos.ErrorH\0R\
    \x03err\x12@\n\x11token_transaction\x18\x03\x20\x01(\x0b2\x11.TokenTrans\
    actionH\0R\x10tokenTransaction\x12>\n\x0eunspent_tokens\x18\x04\x20\x01(\
    \x0b2\x15.protos.UnspentTokensH\0R\runspentTokensB\t\n\x07payload\"Q\n\
    \x15SignedCommandResponse\x12\x1a\n\x08response\x18\x01\x20\x01(\x0cR\
    \x08response\x12\x1c\n\tsignature\x18\x02\x20\x01(\x0cR\tsignature2R\n\
    \x06Prover\x12H\n\x0eProcessCommand\x12\x15.protos.SignedCommand\x1a\x1d\
    .protos.SignedCommandResponse\"\0BQ\n#org.hyperledger.fabric.protos.toke\
    nZ*github.com/hyperledger/fabric/protos/tokenb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(crate::protos::token::expectations::file_descriptor().clone());
            deps.push(crate::protos::token::transaction::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(18);
            messages.push(TokenToIssue::generated_message_descriptor_data());
            messages.push(RecipientTransferShare::generated_message_descriptor_data());
            messages.push(TokenOutput::generated_message_descriptor_data());
            messages.push(UnspentTokens::generated_message_descriptor_data());
            messages.push(ListRequest::generated_message_descriptor_data());
            messages.push(ImportRequest::generated_message_descriptor_data());
            messages.push(TransferRequest::generated_message_descriptor_data());
            messages.push(RedeemRequest::generated_message_descriptor_data());
            messages.push(AllowanceRecipientShare::generated_message_descriptor_data());
            messages.push(ApproveRequest::generated_message_descriptor_data());
            messages.push(ExpectationRequest::generated_message_descriptor_data());
            messages.push(Header::generated_message_descriptor_data());
            messages.push(Command::generated_message_descriptor_data());
            messages.push(SignedCommand::generated_message_descriptor_data());
            messages.push(CommandResponseHeader::generated_message_descriptor_data());
            messages.push(Error::generated_message_descriptor_data());
            messages.push(CommandResponse::generated_message_descriptor_data());
            messages.push(SignedCommandResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
