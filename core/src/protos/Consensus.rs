// This file is generated by rust-protobuf 3.0.2. Do not edit
// .proto file is parsed by protoc 3.6.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `Consensus.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_2;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:bcos.consensus.RawProposal)
pub struct RawProposal {
    // message fields
    // @@protoc_insertion_point(field:bcos.consensus.RawProposal.index)
    pub index: i64,
    // @@protoc_insertion_point(field:bcos.consensus.RawProposal.hash)
    pub hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:bcos.consensus.RawProposal.data)
    pub data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:bcos.consensus.RawProposal.signature)
    pub signature: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:bcos.consensus.RawProposal.extraData)
    pub extraData: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:bcos.consensus.RawProposal.sealerId)
    pub sealerId: i64,
    // @@protoc_insertion_point(field:bcos.consensus.RawProposal.systemProposal)
    pub systemProposal: bool,
    // special fields
    // @@protoc_insertion_point(special_field:bcos.consensus.RawProposal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RawProposal {
    fn default() -> &'a RawProposal {
        <RawProposal as ::protobuf::Message>::default_instance()
    }
}

impl RawProposal {
    pub fn new() -> RawProposal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &RawProposal| { &m.index },
            |m: &mut RawProposal| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &RawProposal| { &m.hash },
            |m: &mut RawProposal| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &RawProposal| { &m.data },
            |m: &mut RawProposal| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &RawProposal| { &m.signature },
            |m: &mut RawProposal| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "extraData",
            |m: &RawProposal| { &m.extraData },
            |m: &mut RawProposal| { &mut m.extraData },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sealerId",
            |m: &RawProposal| { &m.sealerId },
            |m: &mut RawProposal| { &mut m.sealerId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "systemProposal",
            |m: &RawProposal| { &m.systemProposal },
            |m: &mut RawProposal| { &mut m.systemProposal },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RawProposal>(
            "RawProposal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RawProposal {
    const NAME: &'static str = "RawProposal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.index = is.read_int64()?;
                },
                18 => {
                    self.hash = is.read_bytes()?;
                },
                26 => {
                    self.data = is.read_bytes()?;
                },
                34 => {
                    self.signature = is.read_bytes()?;
                },
                42 => {
                    self.extraData = is.read_bytes()?;
                },
                48 => {
                    self.sealerId = is.read_int64()?;
                },
                56 => {
                    self.systemProposal = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.index);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.hash);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.signature);
        }
        if !self.extraData.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.extraData);
        }
        if self.sealerId != 0 {
            my_size += ::protobuf::rt::int64_size(6, self.sealerId);
        }
        if self.systemProposal != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.index != 0 {
            os.write_int64(1, self.index)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(2, &self.hash)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(4, &self.signature)?;
        }
        if !self.extraData.is_empty() {
            os.write_bytes(5, &self.extraData)?;
        }
        if self.sealerId != 0 {
            os.write_int64(6, self.sealerId)?;
        }
        if self.systemProposal != false {
            os.write_bool(7, self.systemProposal)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RawProposal {
        RawProposal::new()
    }

    fn clear(&mut self) {
        self.index = 0;
        self.hash.clear();
        self.data.clear();
        self.signature.clear();
        self.extraData.clear();
        self.sealerId = 0;
        self.systemProposal = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RawProposal {
        static instance: RawProposal = RawProposal {
            index: 0,
            hash: ::std::vec::Vec::new(),
            data: ::std::vec::Vec::new(),
            signature: ::std::vec::Vec::new(),
            extraData: ::std::vec::Vec::new(),
            sealerId: 0,
            systemProposal: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RawProposal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RawProposal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RawProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RawProposal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fConsensus.proto\x12\x0ebcos.consensus\"\xcb\x01\n\x0bRawProposal\
    \x12\x14\n\x05index\x18\x01\x20\x01(\x03R\x05index\x12\x12\n\x04hash\x18\
    \x02\x20\x01(\x0cR\x04hash\x12\x12\n\x04data\x18\x03\x20\x01(\x0cR\x04da\
    ta\x12\x1c\n\tsignature\x18\x04\x20\x01(\x0cR\tsignature\x12\x1c\n\textr\
    aData\x18\x05\x20\x01(\x0cR\textraData\x12\x1a\n\x08sealerId\x18\x06\x20\
    \x01(\x03R\x08sealerId\x12&\n\x0esystemProposal\x18\x07\x20\x01(\x08R\
    \x0esystemProposalb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RawProposal::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
