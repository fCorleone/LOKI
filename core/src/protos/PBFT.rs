// This file is generated by rust-protobuf 3.0.2. Do not edit
// .proto file is parsed by protoc 3.6.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PBFT.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_2;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:bcos.consensus.BaseMessage)
pub struct BaseMessage {
    // message fields
    // @@protoc_insertion_point(field:bcos.consensus.BaseMessage.version)
    pub version: i32,
    // @@protoc_insertion_point(field:bcos.consensus.BaseMessage.index)
    pub index: ::std::string::String,
    // @@protoc_insertion_point(field:bcos.consensus.BaseMessage.hash)
    pub hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:bcos.consensus.BaseMessage.view)
    pub view: i32,
    // @@protoc_insertion_point(field:bcos.consensus.BaseMessage.timestamp)
    pub timestamp: ::std::string::String,
    // @@protoc_insertion_point(field:bcos.consensus.BaseMessage.generatedFrom)
    pub generatedFrom: ::std::string::String,
    // @@protoc_insertion_point(field:bcos.consensus.BaseMessage.signatureHash)
    pub signatureHash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:bcos.consensus.BaseMessage.signatureData)
    pub signatureData: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:bcos.consensus.BaseMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BaseMessage {
    fn default() -> &'a BaseMessage {
        <BaseMessage as ::protobuf::Message>::default_instance()
    }
}

impl BaseMessage {
    pub fn new() -> BaseMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &BaseMessage| { &m.version },
            |m: &mut BaseMessage| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &BaseMessage| { &m.index },
            |m: &mut BaseMessage| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &BaseMessage| { &m.hash },
            |m: &mut BaseMessage| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "view",
            |m: &BaseMessage| { &m.view },
            |m: &mut BaseMessage| { &mut m.view },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &BaseMessage| { &m.timestamp },
            |m: &mut BaseMessage| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "generatedFrom",
            |m: &BaseMessage| { &m.generatedFrom },
            |m: &mut BaseMessage| { &mut m.generatedFrom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signatureHash",
            |m: &BaseMessage| { &m.signatureHash },
            |m: &mut BaseMessage| { &mut m.signatureHash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signatureData",
            |m: &BaseMessage| { &m.signatureData },
            |m: &mut BaseMessage| { &mut m.signatureData },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BaseMessage>(
            "BaseMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BaseMessage {
    const NAME: &'static str = "BaseMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = is.read_int32()?;
                },
                18 => {
                    self.index = is.read_string()?;
                },
                26 => {
                    self.hash = is.read_bytes()?;
                },
                32 => {
                    self.view = is.read_int32()?;
                },
                42 => {
                    self.timestamp = is.read_string()?;
                },
                50 => {
                    self.generatedFrom = is.read_string()?;
                },
                58 => {
                    self.signatureHash = is.read_bytes()?;
                },
                66 => {
                    self.signatureData = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.version);
        }
        if !self.index.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.index);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.hash);
        }
        if self.view != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.view);
        }
        if !self.timestamp.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.timestamp);
        }
        if !self.generatedFrom.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.generatedFrom);
        }
        if !self.signatureHash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.signatureHash);
        }
        if !self.signatureData.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.signatureData);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.version != 0 {
            os.write_int32(1, self.version)?;
        }
        if !self.index.is_empty() {
            os.write_string(2, &self.index)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(3, &self.hash)?;
        }
        if self.view != 0 {
            os.write_int32(4, self.view)?;
        }
        if !self.timestamp.is_empty() {
            os.write_string(5, &self.timestamp)?;
        }
        if !self.generatedFrom.is_empty() {
            os.write_string(6, &self.generatedFrom)?;
        }
        if !self.signatureHash.is_empty() {
            os.write_bytes(7, &self.signatureHash)?;
        }
        if !self.signatureData.is_empty() {
            os.write_bytes(8, &self.signatureData)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BaseMessage {
        BaseMessage::new()
    }

    fn clear(&mut self) {
        self.version = 0;
        self.index.clear();
        self.hash.clear();
        self.view = 0;
        self.timestamp.clear();
        self.generatedFrom.clear();
        self.signatureHash.clear();
        self.signatureData.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BaseMessage {
        static instance: BaseMessage = BaseMessage {
            version: 0,
            index: ::std::string::String::new(),
            hash: ::std::vec::Vec::new(),
            view: 0,
            timestamp: ::std::string::String::new(),
            generatedFrom: ::std::string::String::new(),
            signatureHash: ::std::vec::Vec::new(),
            signatureData: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BaseMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BaseMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BaseMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BaseMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:bcos.consensus.PBFTRawProposal)
pub struct PBFTRawProposal {
    // message fields
    // @@protoc_insertion_point(field:bcos.consensus.PBFTRawProposal.proposal)
    pub proposal: ::protobuf::MessageField<crate::protos::Consensus::RawProposal>,
    // @@protoc_insertion_point(field:bcos.consensus.PBFTRawProposal.nodeList)
    pub nodeList: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:bcos.consensus.PBFTRawProposal.signatureList)
    pub signatureList: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:bcos.consensus.PBFTRawProposal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PBFTRawProposal {
    fn default() -> &'a PBFTRawProposal {
        <PBFTRawProposal as ::protobuf::Message>::default_instance()
    }
}

impl PBFTRawProposal {
    pub fn new() -> PBFTRawProposal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::protos::Consensus::RawProposal>(
            "proposal",
            |m: &PBFTRawProposal| { &m.proposal },
            |m: &mut PBFTRawProposal| { &mut m.proposal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "nodeList",
            |m: &PBFTRawProposal| { &m.nodeList },
            |m: &mut PBFTRawProposal| { &mut m.nodeList },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "signatureList",
            |m: &PBFTRawProposal| { &m.signatureList },
            |m: &mut PBFTRawProposal| { &mut m.signatureList },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PBFTRawProposal>(
            "PBFTRawProposal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PBFTRawProposal {
    const NAME: &'static str = "PBFTRawProposal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proposal)?;
                },
                18 => {
                    self.nodeList.push(is.read_string()?);
                },
                26 => {
                    self.signatureList.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.proposal.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.nodeList {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.signatureList {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.proposal.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.nodeList {
            os.write_string(2, &v)?;
        };
        for v in &self.signatureList {
            os.write_bytes(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PBFTRawProposal {
        PBFTRawProposal::new()
    }

    fn clear(&mut self) {
        self.proposal.clear();
        self.nodeList.clear();
        self.signatureList.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PBFTRawProposal {
        static instance: PBFTRawProposal = PBFTRawProposal {
            proposal: ::protobuf::MessageField::none(),
            nodeList: ::std::vec::Vec::new(),
            signatureList: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PBFTRawProposal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PBFTRawProposal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PBFTRawProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PBFTRawProposal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:bcos.consensus.PBFTRawMessage)
pub struct PBFTRawMessage {
    // message fields
    // @@protoc_insertion_point(field:bcos.consensus.PBFTRawMessage.hashFieldsData)
    pub hashFieldsData: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:bcos.consensus.PBFTRawMessage.consensusProposal)
    pub consensusProposal: ::protobuf::MessageField<PBFTRawProposal>,
    // @@protoc_insertion_point(field:bcos.consensus.PBFTRawMessage.proposals)
    pub proposals: ::std::vec::Vec<PBFTRawProposal>,
    // @@protoc_insertion_point(field:bcos.consensus.PBFTRawMessage.signatureData)
    pub signatureData: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:bcos.consensus.PBFTRawMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PBFTRawMessage {
    fn default() -> &'a PBFTRawMessage {
        <PBFTRawMessage as ::protobuf::Message>::default_instance()
    }
}

impl PBFTRawMessage {
    pub fn new() -> PBFTRawMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hashFieldsData",
            |m: &PBFTRawMessage| { &m.hashFieldsData },
            |m: &mut PBFTRawMessage| { &mut m.hashFieldsData },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PBFTRawProposal>(
            "consensusProposal",
            |m: &PBFTRawMessage| { &m.consensusProposal },
            |m: &mut PBFTRawMessage| { &mut m.consensusProposal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "proposals",
            |m: &PBFTRawMessage| { &m.proposals },
            |m: &mut PBFTRawMessage| { &mut m.proposals },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signatureData",
            |m: &PBFTRawMessage| { &m.signatureData },
            |m: &mut PBFTRawMessage| { &mut m.signatureData },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PBFTRawMessage>(
            "PBFTRawMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PBFTRawMessage {
    const NAME: &'static str = "PBFTRawMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hashFieldsData = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.consensusProposal)?;
                },
                26 => {
                    self.proposals.push(is.read_message()?);
                },
                34 => {
                    self.signatureData = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.hashFieldsData.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.hashFieldsData);
        }
        if let Some(v) = self.consensusProposal.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.proposals {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.signatureData.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.signatureData);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.hashFieldsData.is_empty() {
            os.write_bytes(1, &self.hashFieldsData)?;
        }
        if let Some(v) = self.consensusProposal.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.proposals {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if !self.signatureData.is_empty() {
            os.write_bytes(4, &self.signatureData)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PBFTRawMessage {
        PBFTRawMessage::new()
    }

    fn clear(&mut self) {
        self.hashFieldsData.clear();
        self.consensusProposal.clear();
        self.proposals.clear();
        self.signatureData.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PBFTRawMessage {
        static instance: PBFTRawMessage = PBFTRawMessage {
            hashFieldsData: ::std::vec::Vec::new(),
            consensusProposal: ::protobuf::MessageField::none(),
            proposals: ::std::vec::Vec::new(),
            signatureData: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PBFTRawMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PBFTRawMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PBFTRawMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PBFTRawMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:bcos.consensus.RawViewChangeMessage)
pub struct RawViewChangeMessage {
    // message fields
    // @@protoc_insertion_point(field:bcos.consensus.RawViewChangeMessage.message)
    pub message: ::protobuf::MessageField<BaseMessage>,
    // @@protoc_insertion_point(field:bcos.consensus.RawViewChangeMessage.committedProposal)
    pub committedProposal: ::protobuf::MessageField<PBFTRawProposal>,
    // @@protoc_insertion_point(field:bcos.consensus.RawViewChangeMessage.preparedProposals)
    pub preparedProposals: ::std::vec::Vec<PBFTRawMessage>,
    // special fields
    // @@protoc_insertion_point(special_field:bcos.consensus.RawViewChangeMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RawViewChangeMessage {
    fn default() -> &'a RawViewChangeMessage {
        <RawViewChangeMessage as ::protobuf::Message>::default_instance()
    }
}

impl RawViewChangeMessage {
    pub fn new() -> RawViewChangeMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BaseMessage>(
            "message",
            |m: &RawViewChangeMessage| { &m.message },
            |m: &mut RawViewChangeMessage| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PBFTRawProposal>(
            "committedProposal",
            |m: &RawViewChangeMessage| { &m.committedProposal },
            |m: &mut RawViewChangeMessage| { &mut m.committedProposal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "preparedProposals",
            |m: &RawViewChangeMessage| { &m.preparedProposals },
            |m: &mut RawViewChangeMessage| { &mut m.preparedProposals },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RawViewChangeMessage>(
            "RawViewChangeMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RawViewChangeMessage {
    const NAME: &'static str = "RawViewChangeMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.message)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.committedProposal)?;
                },
                26 => {
                    self.preparedProposals.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.committedProposal.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.preparedProposals {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.message.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.committedProposal.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.preparedProposals {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RawViewChangeMessage {
        RawViewChangeMessage::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.committedProposal.clear();
        self.preparedProposals.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RawViewChangeMessage {
        static instance: RawViewChangeMessage = RawViewChangeMessage {
            message: ::protobuf::MessageField::none(),
            committedProposal: ::protobuf::MessageField::none(),
            preparedProposals: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RawViewChangeMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RawViewChangeMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RawViewChangeMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RawViewChangeMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:bcos.consensus.RawNewViewMessage)
pub struct RawNewViewMessage {
    // message fields
    // @@protoc_insertion_point(field:bcos.consensus.RawNewViewMessage.message)
    pub message: ::protobuf::MessageField<BaseMessage>,
    // @@protoc_insertion_point(field:bcos.consensus.RawNewViewMessage.viewChangeMsgList)
    pub viewChangeMsgList: ::std::vec::Vec<RawViewChangeMessage>,
    // @@protoc_insertion_point(field:bcos.consensus.RawNewViewMessage.prePrepareList)
    pub prePrepareList: ::std::vec::Vec<PBFTRawMessage>,
    // special fields
    // @@protoc_insertion_point(special_field:bcos.consensus.RawNewViewMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RawNewViewMessage {
    fn default() -> &'a RawNewViewMessage {
        <RawNewViewMessage as ::protobuf::Message>::default_instance()
    }
}

impl RawNewViewMessage {
    pub fn new() -> RawNewViewMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BaseMessage>(
            "message",
            |m: &RawNewViewMessage| { &m.message },
            |m: &mut RawNewViewMessage| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "viewChangeMsgList",
            |m: &RawNewViewMessage| { &m.viewChangeMsgList },
            |m: &mut RawNewViewMessage| { &mut m.viewChangeMsgList },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "prePrepareList",
            |m: &RawNewViewMessage| { &m.prePrepareList },
            |m: &mut RawNewViewMessage| { &mut m.prePrepareList },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RawNewViewMessage>(
            "RawNewViewMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RawNewViewMessage {
    const NAME: &'static str = "RawNewViewMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.message)?;
                },
                18 => {
                    self.viewChangeMsgList.push(is.read_message()?);
                },
                26 => {
                    self.prePrepareList.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.viewChangeMsgList {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.prePrepareList {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.message.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.viewChangeMsgList {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.prePrepareList {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RawNewViewMessage {
        RawNewViewMessage::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.viewChangeMsgList.clear();
        self.prePrepareList.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RawNewViewMessage {
        static instance: RawNewViewMessage = RawNewViewMessage {
            message: ::protobuf::MessageField::none(),
            viewChangeMsgList: ::std::vec::Vec::new(),
            prePrepareList: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RawNewViewMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RawNewViewMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RawNewViewMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RawNewViewMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:bcos.consensus.ProposalRequest)
pub struct ProposalRequest {
    // message fields
    // @@protoc_insertion_point(field:bcos.consensus.ProposalRequest.message)
    pub message: ::protobuf::MessageField<BaseMessage>,
    // @@protoc_insertion_point(field:bcos.consensus.ProposalRequest.size)
    pub size: i32,
    // special fields
    // @@protoc_insertion_point(special_field:bcos.consensus.ProposalRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProposalRequest {
    fn default() -> &'a ProposalRequest {
        <ProposalRequest as ::protobuf::Message>::default_instance()
    }
}

impl ProposalRequest {
    pub fn new() -> ProposalRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BaseMessage>(
            "message",
            |m: &ProposalRequest| { &m.message },
            |m: &mut ProposalRequest| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "size",
            |m: &ProposalRequest| { &m.size },
            |m: &mut ProposalRequest| { &mut m.size },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProposalRequest>(
            "ProposalRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProposalRequest {
    const NAME: &'static str = "ProposalRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.message)?;
                },
                16 => {
                    self.size = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.size);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.message.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.size != 0 {
            os.write_int32(2, self.size)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProposalRequest {
        ProposalRequest::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.size = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProposalRequest {
        static instance: ProposalRequest = ProposalRequest {
            message: ::protobuf::MessageField::none(),
            size: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProposalRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProposalRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProposalRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProposalRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:bcos.consensus.RawMessage)
pub struct RawMessage {
    // message fields
    // @@protoc_insertion_point(field:bcos.consensus.RawMessage.version)
    pub version: i32,
    // @@protoc_insertion_point(field:bcos.consensus.RawMessage.type)
    pub type_: i32,
    // @@protoc_insertion_point(field:bcos.consensus.RawMessage.signatureData)
    pub signatureData: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:bcos.consensus.RawMessage.payLoad)
    pub payLoad: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:bcos.consensus.RawMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RawMessage {
    fn default() -> &'a RawMessage {
        <RawMessage as ::protobuf::Message>::default_instance()
    }
}

impl RawMessage {
    pub fn new() -> RawMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &RawMessage| { &m.version },
            |m: &mut RawMessage| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &RawMessage| { &m.type_ },
            |m: &mut RawMessage| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signatureData",
            |m: &RawMessage| { &m.signatureData },
            |m: &mut RawMessage| { &mut m.signatureData },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payLoad",
            |m: &RawMessage| { &m.payLoad },
            |m: &mut RawMessage| { &mut m.payLoad },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RawMessage>(
            "RawMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RawMessage {
    const NAME: &'static str = "RawMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = is.read_int32()?;
                },
                16 => {
                    self.type_ = is.read_int32()?;
                },
                26 => {
                    self.signatureData = is.read_bytes()?;
                },
                34 => {
                    self.payLoad = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.version);
        }
        if self.type_ != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.type_);
        }
        if !self.signatureData.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.signatureData);
        }
        if !self.payLoad.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.payLoad);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.version != 0 {
            os.write_int32(1, self.version)?;
        }
        if self.type_ != 0 {
            os.write_int32(2, self.type_)?;
        }
        if !self.signatureData.is_empty() {
            os.write_bytes(3, &self.signatureData)?;
        }
        if !self.payLoad.is_empty() {
            os.write_bytes(4, &self.payLoad)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RawMessage {
        RawMessage::new()
    }

    fn clear(&mut self) {
        self.version = 0;
        self.type_ = 0;
        self.signatureData.clear();
        self.payLoad.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RawMessage {
        static instance: RawMessage = RawMessage {
            version: 0,
            type_: 0,
            signatureData: ::std::vec::Vec::new(),
            payLoad: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RawMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RawMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RawMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RawMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nPBFT.proto\x12\x0ebcos.consensus\x1a\x0fConsensus.proto\"\xf5\x01\n\
    \x0bBaseMessage\x12\x18\n\x07version\x18\x01\x20\x01(\x05R\x07version\
    \x12\x14\n\x05index\x18\x02\x20\x01(\tR\x05index\x12\x12\n\x04hash\x18\
    \x03\x20\x01(\x0cR\x04hash\x12\x12\n\x04view\x18\x04\x20\x01(\x05R\x04vi\
    ew\x12\x1c\n\ttimestamp\x18\x05\x20\x01(\tR\ttimestamp\x12$\n\rgenerated\
    From\x18\x06\x20\x01(\tR\rgeneratedFrom\x12$\n\rsignatureHash\x18\x07\
    \x20\x01(\x0cR\rsignatureHash\x12$\n\rsignatureData\x18\x08\x20\x01(\x0c\
    R\rsignatureData\"\x8c\x01\n\x0fPBFTRawProposal\x127\n\x08proposal\x18\
    \x01\x20\x01(\x0b2\x1b.bcos.consensus.RawProposalR\x08proposal\x12\x1a\n\
    \x08nodeList\x18\x02\x20\x03(\tR\x08nodeList\x12$\n\rsignatureList\x18\
    \x03\x20\x03(\x0cR\rsignatureList\"\xec\x01\n\x0ePBFTRawMessage\x12&\n\
    \x0ehashFieldsData\x18\x01\x20\x01(\x0cR\x0ehashFieldsData\x12M\n\x11con\
    sensusProposal\x18\x02\x20\x01(\x0b2\x1f.bcos.consensus.PBFTRawProposalR\
    \x11consensusProposal\x12=\n\tproposals\x18\x03\x20\x03(\x0b2\x1f.bcos.c\
    onsensus.PBFTRawProposalR\tproposals\x12$\n\rsignatureData\x18\x04\x20\
    \x01(\x0cR\rsignatureData\"\xea\x01\n\x14RawViewChangeMessage\x125\n\x07\
    message\x18\x01\x20\x01(\x0b2\x1b.bcos.consensus.BaseMessageR\x07message\
    \x12M\n\x11committedProposal\x18\x02\x20\x01(\x0b2\x1f.bcos.consensus.PB\
    FTRawProposalR\x11committedProposal\x12L\n\x11preparedProposals\x18\x03\
    \x20\x03(\x0b2\x1e.bcos.consensus.PBFTRawMessageR\x11preparedProposals\"\
    \xe6\x01\n\x11RawNewViewMessage\x125\n\x07message\x18\x01\x20\x01(\x0b2\
    \x1b.bcos.consensus.BaseMessageR\x07message\x12R\n\x11viewChangeMsgList\
    \x18\x02\x20\x03(\x0b2$.bcos.consensus.RawViewChangeMessageR\x11viewChan\
    geMsgList\x12F\n\x0eprePrepareList\x18\x03\x20\x03(\x0b2\x1e.bcos.consen\
    sus.PBFTRawMessageR\x0eprePrepareList\"\\\n\x0fProposalRequest\x125\n\
    \x07message\x18\x01\x20\x01(\x0b2\x1b.bcos.consensus.BaseMessageR\x07mes\
    sage\x12\x12\n\x04size\x18\x02\x20\x01(\x05R\x04size\"z\n\nRawMessage\
    \x12\x18\n\x07version\x18\x01\x20\x01(\x05R\x07version\x12\x12\n\x04type\
    \x18\x02\x20\x01(\x05R\x04type\x12$\n\rsignatureData\x18\x03\x20\x01(\
    \x0cR\rsignatureData\x12\x18\n\x07payLoad\x18\x04\x20\x01(\x0cR\x07payLo\
    adb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(crate::protos::Consensus::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(BaseMessage::generated_message_descriptor_data());
            messages.push(PBFTRawProposal::generated_message_descriptor_data());
            messages.push(PBFTRawMessage::generated_message_descriptor_data());
            messages.push(RawViewChangeMessage::generated_message_descriptor_data());
            messages.push(RawNewViewMessage::generated_message_descriptor_data());
            messages.push(ProposalRequest::generated_message_descriptor_data());
            messages.push(RawMessage::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
